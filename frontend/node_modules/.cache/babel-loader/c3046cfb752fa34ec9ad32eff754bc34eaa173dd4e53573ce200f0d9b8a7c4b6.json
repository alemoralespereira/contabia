{"ast":null,"code":"// Funciones para generar informes\nexport const generateTasksByUserReport=(tasks,users,clients)=>{const userTasks={};users.forEach(user=>{const userTaskList=tasks.filter(task=>task.assigneeId===user.id);if(userTaskList.length>0){userTasks[user.id]={userName:user.name,totalTasks:userTaskList.length,completedTasks:userTaskList.filter(task=>task.status===\"completed\").length,pendingTasks:userTaskList.filter(task=>task.status===\"pending\").length,inProgressTasks:userTaskList.filter(task=>task.status===\"in_progress\").length,reviewTasks:userTaskList.filter(task=>task.status===\"review\").length,highPriorityTasks:userTaskList.filter(task=>task.priority===\"high\").length,overdueTasks:userTaskList.filter(task=>{const dueDate=new Date(task.dueDate);const today=new Date();return dueDate<today&&task.status!==\"completed\";}).length,tasksByClient:userTaskList.reduce((acc,task)=>{const client=clients.find(c=>c.id===task.clientId);if(client){if(!acc[client.id]){acc[client.id]={clientName:client.name,count:0};}acc[client.id].count++;}return acc;},{})};}});return userTasks;};export const generateTasksByTeamReport=(tasks,teams,users)=>{const teamTasks={};teams.forEach(team=>{const teamMembers=users.filter(user=>user.teamId===team.id).map(user=>user.id);const teamTaskList=tasks.filter(task=>teamMembers.includes(task.assigneeId));if(teamTaskList.length>0){teamTasks[team.id]={teamName:team.name,totalTasks:teamTaskList.length,completedTasks:teamTaskList.filter(task=>task.status===\"completed\").length,pendingTasks:teamTaskList.filter(task=>task.status===\"pending\").length,inProgressTasks:teamTaskList.filter(task=>task.status===\"in_progress\").length,reviewTasks:teamTaskList.filter(task=>task.status===\"review\").length,highPriorityTasks:teamTaskList.filter(task=>task.priority===\"high\").length,overdueTasks:teamTaskList.filter(task=>{const dueDate=new Date(task.dueDate);const today=new Date();return dueDate<today&&task.status!==\"completed\";}).length,memberPerformance:teamMembers.reduce((acc,memberId)=>{const member=users.find(u=>u.id===memberId);const memberTasks=teamTaskList.filter(task=>task.assigneeId===memberId);if(member&&memberTasks.length>0){acc[memberId]={memberName:member.name,totalTasks:memberTasks.length,completedTasks:memberTasks.filter(task=>task.status===\"completed\").length};}return acc;},{})};}});return teamTasks;};export const generateClientTasksReport=(tasks,clients)=>{const clientTasks={};clients.forEach(client=>{const clientTaskList=tasks.filter(task=>task.clientId===client.id);if(clientTaskList.length>0){clientTasks[client.id]={clientName:client.name,totalTasks:clientTaskList.length,completedTasks:clientTaskList.filter(task=>task.status===\"completed\").length,pendingTasks:clientTaskList.filter(task=>task.status===\"pending\").length,inProgressTasks:clientTaskList.filter(task=>task.status===\"in_progress\").length,reviewTasks:clientTaskList.filter(task=>task.status===\"review\").length,highPriorityTasks:clientTaskList.filter(task=>task.priority===\"high\").length,overdueTasks:clientTaskList.filter(task=>{const dueDate=new Date(task.dueDate);const today=new Date();return dueDate<today&&task.status!==\"completed\";}).length};}});return clientTasks;};","map":{"version":3,"names":["generateTasksByUserReport","tasks","users","clients","userTasks","forEach","user","userTaskList","filter","task","assigneeId","id","length","userName","name","totalTasks","completedTasks","status","pendingTasks","inProgressTasks","reviewTasks","highPriorityTasks","priority","overdueTasks","dueDate","Date","today","tasksByClient","reduce","acc","client","find","c","clientId","clientName","count","generateTasksByTeamReport","teams","teamTasks","team","teamMembers","teamId","map","teamTaskList","includes","teamName","memberPerformance","memberId","member","u","memberTasks","memberName","generateClientTasksReport","clientTasks","clientTaskList"],"sources":["C:/Contabia/frontend/src/utils/reportUtils.js"],"sourcesContent":["// Funciones para generar informes\n\nexport const generateTasksByUserReport = (tasks, users, clients) => {\n  const userTasks = {};\n  \n  users.forEach(user => {\n    const userTaskList = tasks.filter(task => task.assigneeId === user.id);\n    \n    if (userTaskList.length > 0) {\n      userTasks[user.id] = {\n        userName: user.name,\n        totalTasks: userTaskList.length,\n        completedTasks: userTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: userTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: userTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: userTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: userTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: userTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        tasksByClient: userTaskList.reduce((acc, task) => {\n          const client = clients.find(c => c.id === task.clientId);\n          if (client) {\n            if (!acc[client.id]) {\n              acc[client.id] = {\n                clientName: client.name,\n                count: 0\n              };\n            }\n            acc[client.id].count++;\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  \n  return userTasks;\n};\n\nexport const generateTasksByTeamReport = (tasks, teams, users) => {\n  const teamTasks = {};\n  \n  teams.forEach(team => {\n    const teamMembers = users.filter(user => user.teamId === team.id).map(user => user.id);\n    const teamTaskList = tasks.filter(task => teamMembers.includes(task.assigneeId));\n    \n    if (teamTaskList.length > 0) {\n      teamTasks[team.id] = {\n        teamName: team.name,\n        totalTasks: teamTaskList.length,\n        completedTasks: teamTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: teamTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: teamTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: teamTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: teamTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: teamTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        memberPerformance: teamMembers.reduce((acc, memberId) => {\n          const member = users.find(u => u.id === memberId);\n          const memberTasks = teamTaskList.filter(task => task.assigneeId === memberId);\n          \n          if (member && memberTasks.length > 0) {\n            acc[memberId] = {\n              memberName: member.name,\n              totalTasks: memberTasks.length,\n              completedTasks: memberTasks.filter(task => task.status === \"completed\").length\n            };\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  \n  return teamTasks;\n};\n\nexport const generateClientTasksReport = (tasks, clients) => {\n  const clientTasks = {};\n  \n  clients.forEach(client => {\n    const clientTaskList = tasks.filter(task => task.clientId === client.id);\n    \n    if (clientTaskList.length > 0) {\n      clientTasks[client.id] = {\n        clientName: client.name,\n        totalTasks: clientTaskList.length,\n        completedTasks: clientTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: clientTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: clientTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: clientTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: clientTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: clientTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length\n      };\n    }\n  });\n  \n  return clientTasks;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}