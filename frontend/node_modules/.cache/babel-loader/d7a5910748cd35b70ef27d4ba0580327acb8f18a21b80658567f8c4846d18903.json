{"ast":null,"code":"// Funciones de autenticación y manejo de sesiones\n\nexport const authenticateUser = (email, password, users) => {\n  const user = users.find(u => u.email === email && u.password === password);\n  if (user) {\n    // En una aplicación real, aquí generaríamos un token JWT\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        accountId: user.accountId,\n        teamId: user.teamId,\n        avatar: user.avatar,\n        ci: user.ci // Incluir CI en el user object\n      }\n    };\n  }\n  return {\n    success: false,\n    message: \"Credenciales inválidas\"\n  };\n};\nexport const checkUserPermission = (user, requiredRole) => {\n  if (!user) return false;\n\n  // Roles en orden jerárquico\n  const roles = [\"member\", \"supervisor\", \"admin\"];\n  const userRoleIndex = roles.indexOf(user.role);\n  const requiredRoleIndex = roles.indexOf(requiredRole);\n\n  // El user tiene el rol requerido o un rol superior\n  return userRoleIndex >= requiredRoleIndex;\n};\nexport const getUserTeamMembers = (user, users, teams) => {\n  if (!user || !Array.isArray(users) || !Array.isArray(teams)) return [];\n\n  // Si es supervisor, obtener miembros de su equipo\n  if (user.role === \"supervisor\") {\n    return users.filter(u => u.teamId === user.teamId && u.id !== user.id);\n  }\n\n  // Si es admin, obtener todos los users que no sean el admin actual\n  if (user.role === \"admin\") {\n    return users.filter(u => u.id !== user.id);\n  }\n  return [];\n};\n// DONE","map":{"version":3,"names":["authenticateUser","email","password","users","user","find","u","success","id","name","role","accountId","teamId","avatar","ci","message","checkUserPermission","requiredRole","roles","userRoleIndex","indexOf","requiredRoleIndex","getUserTeamMembers","teams","Array","isArray","filter"],"sources":["C:/Contabia/frontend/src/utils/auth.js"],"sourcesContent":["// Funciones de autenticación y manejo de sesiones\n\nexport const authenticateUser = (email, password, users) => {\n  const user = users.find(u => u.email === email && u.password === password);\n  if (user) {\n    // En una aplicación real, aquí generaríamos un token JWT\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        accountId: user.accountId,\n        teamId: user.teamId,\n        avatar: user.avatar,\n        ci: user.ci // Incluir CI en el user object\n      }\n    };\n  }\n  return { success: false, message: \"Credenciales inválidas\" };\n};\n\nexport const checkUserPermission = (user, requiredRole) => {\n  if (!user) return false;\n  \n  // Roles en orden jerárquico\n  const roles = [\"member\", \"supervisor\", \"admin\"];\n  const userRoleIndex = roles.indexOf(user.role);\n  const requiredRoleIndex = roles.indexOf(requiredRole);\n  \n  // El user tiene el rol requerido o un rol superior\n  return userRoleIndex >= requiredRoleIndex;\n};\n\nexport const getUserTeamMembers = (user, users, teams) => {\n  if (!user || !Array.isArray(users) || !Array.isArray(teams)) return [];\n  \n  // Si es supervisor, obtener miembros de su equipo\n  if (user.role === \"supervisor\") {\n    return users.filter(u => u.teamId === user.teamId && u.id !== user.id);\n  }\n  \n  // Si es admin, obtener todos los users que no sean el admin actual\n  if (user.role === \"admin\") {\n    return users.filter(u => u.id !== user.id);\n  }\n  \n  return [];\n};\n// DONE"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,KAAK;EAC1D,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,KAAK,KAAKA,KAAK,IAAIK,CAAC,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;EAC1E,IAAIE,IAAI,EAAE;IACR;IACA,OAAO;MACLG,OAAO,EAAE,IAAI;MACbH,IAAI,EAAE;QACJI,EAAE,EAAEJ,IAAI,CAACI,EAAE;QACXC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfR,KAAK,EAAEG,IAAI,CAACH,KAAK;QACjBS,IAAI,EAAEN,IAAI,CAACM,IAAI;QACfC,SAAS,EAAEP,IAAI,CAACO,SAAS;QACzBC,MAAM,EAAER,IAAI,CAACQ,MAAM;QACnBC,MAAM,EAAET,IAAI,CAACS,MAAM;QACnBC,EAAE,EAAEV,IAAI,CAACU,EAAE,CAAC;MACd;IACF,CAAC;EACH;EACA,OAAO;IAAEP,OAAO,EAAE,KAAK;IAAEQ,OAAO,EAAE;EAAyB,CAAC;AAC9D,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAACZ,IAAI,EAAEa,YAAY,KAAK;EACzD,IAAI,CAACb,IAAI,EAAE,OAAO,KAAK;;EAEvB;EACA,MAAMc,KAAK,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC;EAC/C,MAAMC,aAAa,GAAGD,KAAK,CAACE,OAAO,CAAChB,IAAI,CAACM,IAAI,CAAC;EAC9C,MAAMW,iBAAiB,GAAGH,KAAK,CAACE,OAAO,CAACH,YAAY,CAAC;;EAErD;EACA,OAAOE,aAAa,IAAIE,iBAAiB;AAC3C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAAClB,IAAI,EAAED,KAAK,EAAEoB,KAAK,KAAK;EACxD,IAAI,CAACnB,IAAI,IAAI,CAACoB,KAAK,CAACC,OAAO,CAACtB,KAAK,CAAC,IAAI,CAACqB,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE,OAAO,EAAE;;EAEtE;EACA,IAAInB,IAAI,CAACM,IAAI,KAAK,YAAY,EAAE;IAC9B,OAAOP,KAAK,CAACuB,MAAM,CAACpB,CAAC,IAAIA,CAAC,CAACM,MAAM,KAAKR,IAAI,CAACQ,MAAM,IAAIN,CAAC,CAACE,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;EACxE;;EAEA;EACA,IAAIJ,IAAI,CAACM,IAAI,KAAK,OAAO,EAAE;IACzB,OAAOP,KAAK,CAACuB,MAAM,CAACpB,CAAC,IAAIA,CAAC,CAACE,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;EAC5C;EAEA,OAAO,EAAE;AACX,CAAC;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}