{"ast":null,"code":"import _objectSpread from\"C:/Contabia/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AIReportAssistant=_ref=>{let{tasks,users,teams,clients,currentUser,userTasksReport,teamTasksReport,clientTasksReport}=_ref;const[query,setQuery]=useState('');const[response,setResponse]=useState('');const[isLoading,setIsLoading]=useState(false);const[chatHistory,setChatHistory]=useState([]);const[conversationContext,setConversationContext]=useState({lastMentionedTasks:null,// Últimas tareas mencionadas en detalle\nlastMentionedUser:null,lastMentionedTeam:null,lastMentionedClient:null,lastMentionedOverdueTasks:null,// Todas las tareas vencidas mencionadas\nlastMentionedHighPriorityTasks:null,lastMentionedSortedOverdueTasks:null,// Tareas vencidas ordenadas por antigüedad\nlastMentionedOldestTask:null,lastDiscussedTopic:null// Tema general de la última interacción\n});const chatContainerRef=useRef(null);// Helper para obtener el nombre de un usuario por ID\nconst getUserNameById=id=>{var _users$find;return((_users$find=users.find(u=>u.id===id))===null||_users$find===void 0?void 0:_users$find.name)||'Desconocido';};// Helper para obtener el nombre de un equipo por ID\nconst getTeamNameById=id=>{var _teams$find;return((_teams$find=teams.find(t=>t.id===id))===null||_teams$find===void 0?void 0:_teams$find.name)||'Desconocido';};// Helper para obtener el nombre de un cliente por ID\nconst getClientNameById=id=>{var _clients$find;return((_clients$find=clients.find(c=>c.id===id))===null||_clients$find===void 0?void 0:_clients$find.name)||'Desconocido';};// Helper para formatear fechas\nconst formatDate=dateString=>{const options={year:'numeric',month:'long',day:'numeric'};return new Date(dateString).toLocaleDateString('es-ES',options);};// Helper para calcular días de retraso\nconst getDaysOverdue=dueDate=>{const today=new Date();const due=new Date(dueDate);const diffTime=Math.abs(today-due);return Math.ceil(diffTime/(1000*60*60*24));};// Obtener todas las tareas vencidas\nconst getAllOverdueTasks=()=>{return tasks.filter(t=>new Date(t.dueDate)<new Date()&&t.status!=='completed');};// Obtener la tarea vencida más antigua\nconst getOldestOverdueTask=()=>{const overdueTasks=getAllOverdueTasks();if(overdueTasks.length===0)return null;return overdueTasks.reduce((oldest,current)=>{return new Date(current.dueDate)<new Date(oldest.dueDate)?current:oldest;},overdueTasks[0]);};// Simulación de la IA\nconst generateAIResponse=userQuery=>{setIsLoading(true);let aiResponse=\"Lo siento, no pude encontrar información relevante para tu consulta. Intenta preguntar de otra manera.\";let newContext=_objectSpread({},conversationContext);const lowerQuery=userQuery.toLowerCase().trim();// --- Manejo de preguntas de seguimiento sobre tareas específicas ---\nif((lowerQuery.includes(\"a quién\")||lowerQuery.includes(\"a quien\"))&&(lowerQuery.includes(\"están asignadas\")||lowerQuery.includes(\"está asignada\"))&&(lowerQuery.includes(\"esas\")||lowerQuery.includes(\"estas\")||lowerQuery.includes(\"las\"))){if(newContext.lastMentionedTasks&&newContext.lastMentionedTasks.length>0){aiResponse=\"Las tareas que mencionaste est\\xE1n asignadas a:\\n\";newContext.lastMentionedTasks.forEach((task,index)=>{aiResponse+=\"\".concat(index+1,\". \\\"\").concat(task.title,\"\\\" est\\xE1 asignada a \").concat(getUserNameById(task.assigneeId),\".\\n\");});}else{aiResponse=\"Lo siento, no tengo un contexto claro de a qué tareas te refieres. ¿Podrías especificar?\";}}// Preguntas sobre las N tareas con mayor atraso\nelse if((lowerQuery.includes(\"dime\")||lowerQuery.includes(\"muéstrame\"))&&(lowerQuery.includes(\"las\")||lowerQuery.includes(\"los\"))&&(lowerQuery.includes(\"tareas\")||lowerQuery.includes(\"pendientes\"))&&(lowerQuery.includes(\"mayor atraso\")||lowerQuery.includes(\"más atraso\")||lowerQuery.includes(\"más antiguas\"))&&lowerQuery.match(/\\d+/)// Busca un número en la consulta\n){const numMatch=lowerQuery.match(/\\d+/);const numTasks=parseInt(numMatch[0]);const overdueTasks=getAllOverdueTasks();if(overdueTasks.length>0){const sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));const topTasks=sortedOverdueTasks.slice(0,numTasks);if(topTasks.length>0){aiResponse=\"Aqu\\xED tienes las \".concat(topTasks.length,\" tareas con mayor atraso:\\n\");topTasks.forEach((task,index)=>{const daysOverdue=getDaysOverdue(task.dueDate);const priorityText=task.priority==='high'?'(alta prioridad)':task.priority==='medium'?'(prioridad media)':'(baja prioridad)';aiResponse+=\"\".concat(index+1,\". \\\"\").concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\", asignada a \").concat(getUserNameById(task.assigneeId),\". Venci\\xF3 hace \").concat(daysOverdue,\" d\\xEDas \").concat(priorityText,\".\\n\");});// Actualizar contexto para futuras preguntas de seguimiento\nnewContext.lastMentionedTasks=topTasks;newContext.lastMentionedOverdueTasks=topTasks;newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastDiscussedTopic=\"top_n_tareas_atrasadas\";}else{aiResponse=\"No hay \".concat(numTasks,\" tareas vencidas para mostrar. Solo hay \").concat(overdueTasks.length,\" tareas vencidas en total.\");}}else{aiResponse=\"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";newContext.lastMentionedTasks=[];newContext.lastMentionedOverdueTasks=[];newContext.lastMentionedSortedOverdueTasks=[];}}// Preguntas sobre quién tiene el pendiente más atrasado\nelse if((lowerQuery.includes(\"quién\")||lowerQuery.includes(\"quien\"))&&(lowerQuery.includes(\"pendiente\")||lowerQuery.includes(\"tarea\"))&&(lowerQuery.includes(\"atrasado\")||lowerQuery.includes(\"atrasada\")||lowerQuery.includes(\"atraso\"))){// Buscar la tarea más atrasada\nlet oldestTask;// Si tenemos la tarea más antigua guardada en el contexto\nif(newContext.lastMentionedOldestTask){oldestTask=newContext.lastMentionedOldestTask;}// Si no hay contexto, buscamos la tarea más antigua en general\nelse{oldestTask=getOldestOverdueTask();}if(oldestTask){const oldestTaskDueDate=formatDate(oldestTask.dueDate);const daysOverdue=getDaysOverdue(oldestTask.dueDate);const assigneeName=getUserNameById(oldestTask.assigneeId);const clientName=getClientNameById(oldestTask.clientId);aiResponse=\"\".concat(assigneeName,\" tiene la tarea m\\xE1s atrasada. Se trata de \\\"\").concat(oldestTask.title,\"\\\" para el cliente \").concat(clientName,\", que venci\\xF3 el \").concat(oldestTaskDueDate,\" y lleva \").concat(daysOverdue,\" d\\xEDas de atraso. \");// Agregar información sobre la prioridad\nif(oldestTask.priority==='high'){aiResponse+=\"Es una tarea de alta prioridad y requiere atenci\\xF3n inmediata.\";}else if(oldestTask.priority==='medium'){aiResponse+=\"Es una tarea de prioridad media.\";}else{aiResponse+=\"Es una tarea de baja prioridad, pero a\\xFAn as\\xED tiene un atraso considerable.\";}// Actualizar contexto\nnewContext.lastMentionedOldestTask=oldestTask;newContext.lastDiscussedTopic=\"persona_con_tarea_mas_atrasada\";}else{aiResponse=\"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";newContext.lastMentionedOldestTask=null;}}// Preguntas sobre cuál es el pendiente más atrasado\nelse if((lowerQuery.includes(\"cuál\")||lowerQuery.includes(\"cual\"))&&(lowerQuery.includes(\"pendiente\")||lowerQuery.includes(\"tarea\"))&&(lowerQuery.includes(\"atrasado\")||lowerQuery.includes(\"atrasada\")||lowerQuery.includes(\"atraso\"))||lowerQuery.includes(\"más\")&&lowerQuery.includes(\"atrasado\")){// Buscar la tarea más atrasada\nlet oldestTask;// Si tenemos la tarea más antigua guardada en el contexto\nif(newContext.lastMentionedOldestTask){oldestTask=newContext.lastMentionedOldestTask;}// Si no hay contexto, buscamos la tarea más antigua en general\nelse{oldestTask=getOldestOverdueTask();}if(oldestTask){const oldestTaskDueDate=formatDate(oldestTask.dueDate);const daysOverdue=getDaysOverdue(oldestTask.dueDate);const assigneeName=getUserNameById(oldestTask.assigneeId);const clientName=getClientNameById(oldestTask.clientId);aiResponse=\"La tarea m\\xE1s atrasada es \\\"\".concat(oldestTask.title,\"\\\" para el cliente \").concat(clientName,\", asignada a \").concat(assigneeName,\". Venci\\xF3 el \").concat(oldestTaskDueDate,\" y lleva \").concat(daysOverdue,\" d\\xEDas de atraso. \");// Agregar información sobre la prioridad\nif(oldestTask.priority==='high'){aiResponse+=\"Es una tarea de alta prioridad y requiere atenci\\xF3n inmediata.\";}else if(oldestTask.priority==='medium'){aiResponse+=\"Es una tarea de prioridad media.\";}else{aiResponse+=\"Es una tarea de baja prioridad, pero a\\xFAn as\\xED tiene un atraso considerable.\";}// Actualizar contexto\nnewContext.lastMentionedOldestTask=oldestTask;newContext.lastDiscussedTopic=\"tarea_mas_atrasada\";}else{aiResponse=\"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";newContext.lastMentionedOldestTask=null;}}// Preguntas sobre tareas más antiguas respecto a su vencimiento\nelse if(lowerQuery.includes(\"tareas\")&&lowerQuery.includes(\"antiguas\")&&lowerQuery.includes(\"vencimiento\")||lowerQuery.includes(\"tareas\")&&lowerQuery.includes(\"vencidas\")&&lowerQuery.includes(\"antiguas\")||lowerQuery.includes(\"tareas\")&&lowerQuery.includes(\"mayor\")&&lowerQuery.includes(\"atraso\")){const overdueTasks=getAllOverdueTasks();if(overdueTasks.length>0){// Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\nconst sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));aiResponse=\"Las tareas vencidas ordenadas por antig\\xFCedad son:\\n\";sortedOverdueTasks.forEach((task,index)=>{const daysOverdue=getDaysOverdue(task.dueDate);const priorityText=task.priority==='high'?'(alta prioridad)':task.priority==='medium'?'(prioridad media)':'(baja prioridad)';aiResponse+=\"\".concat(index+1,\". \\\"\").concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\", asignada a \").concat(getUserNameById(task.assigneeId),\". Venci\\xF3 hace \").concat(daysOverdue,\" d\\xEDas \").concat(priorityText,\".\\n\");});// Actualizar contexto\nnewContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOldestTask=sortedOverdueTasks[0];newContext.lastDiscussedTopic=\"tareas_ordenadas_por_antiguedad\";}else{aiResponse=\"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";newContext.lastMentionedOverdueTasks=[];newContext.lastMentionedSortedOverdueTasks=[];newContext.lastMentionedOldestTask=null;}}// Manejo de preguntas de seguimiento basadas en contexto\nelse if((lowerQuery.includes(\"cuáles\")||lowerQuery.includes(\"cuales\")||lowerQuery.includes(\"qué\")||lowerQuery.includes(\"que\"))&&(lowerQuery.includes(\"son\")||lowerQuery.includes(\"es\"))&&(lowerQuery.includes(\"esas\")||lowerQuery.includes(\"estas\")||lowerQuery.includes(\"las\")||lowerQuery.includes(\"esas tareas\")||lowerQuery.includes(\"estas tareas\"))){// El usuario está preguntando por tareas mencionadas anteriormente\nif(newContext.lastMentionedHighPriorityTasks&&newContext.lastMentionedHighPriorityTasks.length>0){const highPriorityTasks=newContext.lastMentionedHighPriorityTasks;aiResponse=\"Las tareas de alta prioridad que mencion\\xE9 son:\\n\";highPriorityTasks.forEach((task,index)=>{const daysOverdue=getDaysOverdue(task.dueDate);aiResponse+=\"\".concat(index+1,\". \\\"\").concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\", asignada a \").concat(getUserNameById(task.assigneeId),\". Venci\\xF3 hace \").concat(daysOverdue,\" d\\xEDas.\\n\");});newContext.lastDiscussedTopic=\"tareas_alta_prioridad\";}else if(newContext.lastMentionedOverdueTasks&&newContext.lastMentionedOverdueTasks.length>0){const overdueTasks=newContext.lastMentionedOverdueTasks;aiResponse=\"Las tareas vencidas que mencion\\xE9 son:\\n\";overdueTasks.forEach((task,index)=>{const daysOverdue=getDaysOverdue(task.dueDate);const priorityText=task.priority==='high'?'(alta prioridad)':task.priority==='medium'?'(prioridad media)':'(baja prioridad)';aiResponse+=\"\".concat(index+1,\". \\\"\").concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\", asignada a \").concat(getUserNameById(task.assigneeId),\". Venci\\xF3 hace \").concat(daysOverdue,\" d\\xEDas \").concat(priorityText,\".\\n\");});newContext.lastDiscussedTopic=\"tareas_vencidas\";}else{aiResponse=\"Lo siento, no he mencionado tareas específicas en nuestra conversación anterior. ¿Te gustaría que te muestre las tareas vencidas o pendientes?\";}}// Preguntas sobre la tarea vencida más antigua\nelse if(lowerQuery.includes(\"tarea vencida más antigua\")||lowerQuery.includes(\"vencimiento más antiguo\")||lowerQuery.includes(\"vencida hace más tiempo\")||lowerQuery.includes(\"cuál\")&&lowerQuery.includes(\"vencida\")&&lowerQuery.includes(\"más tiempo\")||lowerQuery.includes(\"cuál\")&&lowerQuery.includes(\"está vencida\")&&lowerQuery.includes(\"más tiempo\")){const oldestTask=getOldestOverdueTask();if(oldestTask){const oldestTaskDueDate=formatDate(oldestTask.dueDate);const daysOverdue=getDaysOverdue(oldestTask.dueDate);const assigneeName=getUserNameById(oldestTask.assigneeId);const clientName=getClientNameById(oldestTask.clientId);aiResponse=\"La tarea vencida hace m\\xE1s tiempo es \\\"\".concat(oldestTask.title,\"\\\" para el cliente \").concat(clientName,\". Est\\xE1 asignada a \").concat(assigneeName,\" y venci\\xF3 el \").concat(oldestTaskDueDate,\", hace \").concat(daysOverdue,\" d\\xEDas. \");// Agregar información sobre la prioridad\nif(oldestTask.priority==='high'){aiResponse+=\"Esta tarea es de alta prioridad y requiere atenci\\xF3n inmediata.\";}else if(oldestTask.priority==='medium'){aiResponse+=\"Esta tarea es de prioridad media.\";}else{aiResponse+=\"Esta tarea es de baja prioridad, pero a\\xFAn as\\xED est\\xE1 vencida.\";}// Actualizar contexto\nnewContext.lastMentionedTasks=[oldestTask];newContext.lastMentionedOldestTask=oldestTask;// También guardar todas las tareas vencidas ordenadas\nconst overdueTasks=getAllOverdueTasks();const sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastDiscussedTopic=\"tarea_mas_antigua\";}else{aiResponse=\"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";newContext.lastMentionedTasks=[];newContext.lastMentionedSortedOverdueTasks=[];newContext.lastMentionedOldestTask=null;}}// Pendientes por nombre específico (sin necesidad de la palabra \"integrante\" o \"colaborador\")\nelse if(lowerQuery.match(/pendientes\\s+de\\s+([\\w\\s]+)/)||lowerQuery.match(/tareas\\s+de\\s+([\\w\\s]+)/)){const nameMatch=lowerQuery.match(/(?:pendientes|tareas)\\s+de\\s+([\\w\\s]+)/);if(nameMatch&&nameMatch[1]){const requestedName=nameMatch[1].trim();const user=users.find(u=>u.name.toLowerCase().includes(requestedName.toLowerCase()));if(user){const userTasks=tasks.filter(t=>t.assigneeId===user.id&&t.status!=='completed');if(userTasks.length>0){const pendingCount=userTasks.filter(t=>t.status==='pending').length;const inProgressCount=userTasks.filter(t=>t.status==='in_progress').length;const reviewCount=userTasks.filter(t=>t.status==='review').length;const overdueCount=userTasks.filter(t=>new Date(t.dueDate)<new Date()).length;aiResponse=\"\".concat(user.name,\" tiene \").concat(userTasks.length,\" tareas pendientes en total. De estas, \").concat(pendingCount,\" est\\xE1n en estado pendiente, \").concat(inProgressCount,\" en progreso y \").concat(reviewCount,\" en revisi\\xF3n.\");if(overdueCount>0){aiResponse+=\" \\xA1Atenci\\xF3n! \".concat(overdueCount,\" de estas tareas est\\xE1n vencidas.\");// Detallar las tareas vencidas\nconst overdueTasks=userTasks.filter(t=>new Date(t.dueDate)<new Date());const overdueDetails=overdueTasks.map(task=>{const daysOverdue=getDaysOverdue(task.dueDate);return\"\\\"\".concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\" (vencida hace \").concat(daysOverdue,\" d\\xEDas)\");}).join(', ');aiResponse+=\" Las tareas vencidas son: \".concat(overdueDetails,\".\");}// Listar las próximas tareas a vencer\nconst upcomingTasks=userTasks.filter(t=>new Date(t.dueDate)>=new Date()).sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate)).slice(0,3);if(upcomingTasks.length>0){const upcomingDetails=upcomingTasks.map(task=>{return\"\\\"\".concat(task.title,\"\\\" para \").concat(getClientNameById(task.clientId),\" (vence el \").concat(formatDate(task.dueDate),\")\");}).join(', ');aiResponse+=\" Las pr\\xF3ximas tareas a vencer son: \".concat(upcomingDetails,\".\");}// Actualizar contexto\nnewContext.lastMentionedUser=user;newContext.lastMentionedTasks=userTasks;// Si hay tareas vencidas, guardar la más antigua\nif(overdueCount>0){const sortedOverdueTasks=[...userTasks.filter(t=>new Date(t.dueDate)<new Date())].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOldestTask=sortedOverdueTasks[0];}newContext.lastDiscussedTopic=\"pendientes_usuario\";}else{aiResponse=\"\\xA1Buenas noticias! \".concat(user.name,\" no tiene tareas pendientes en este momento.\");newContext.lastMentionedUser=user;newContext.lastMentionedTasks=[];}}else{aiResponse=\"No encontr\\xE9 a ning\\xFAn integrante llamado \\\"\".concat(requestedName,\"\\\". \\xBFPodr\\xEDas verificar el nombre?\");}}}// Preguntas sobre tareas vencidas (más directas)\nelse if(lowerQuery.includes(\"tareas vencidas\")||lowerQuery.includes(\"cuántas vencidas\")){const overdueTasks=getAllOverdueTasks();const overdueTasksCount=overdueTasks.length;if(overdueTasksCount>0){// Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\nconst sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));const oldestTask=sortedOverdueTasks[0];const oldestTaskDueDate=formatDate(oldestTask.dueDate);const daysOverdue=getDaysOverdue(oldestTask.dueDate);// Filtrar tareas de alta prioridad\nconst highPriorityTasks=sortedOverdueTasks.filter(t=>t.priority==='high');const highPriorityCount=highPriorityTasks.length;aiResponse=\"Actualmente hay \".concat(overdueTasksCount,\" tareas vencidas en el sistema. La tarea vencida m\\xE1s antigua es \\\"\").concat(oldestTask.title,\"\\\" para el cliente \").concat(getClientNameById(oldestTask.clientId),\", asignada a \").concat(getUserNameById(oldestTask.assigneeId),\". Esta tarea venci\\xF3 el \").concat(oldestTaskDueDate,\" (hace \").concat(daysOverdue,\" d\\xEDas).\");if(overdueTasksCount>1&&highPriorityCount>0){aiResponse+=\" De las tareas vencidas, \".concat(highPriorityCount,\" son de alta prioridad y requieren atenci\\xF3n inmediata.\");}// Actualizar contexto\nnewContext.lastMentionedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedHighPriorityTasks=highPriorityTasks;newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOldestTask=oldestTask;newContext.lastDiscussedTopic=\"tareas_vencidas\";}else{aiResponse=\"¡Excelente! No hay tareas vencidas en este momento. ¡Vamos por buen camino!\";newContext.lastMentionedOverdueTasks=[];newContext.lastMentionedHighPriorityTasks=[];newContext.lastMentionedSortedOverdueTasks=[];newContext.lastMentionedOldestTask=null;}}// --- Respuestas más flexibles para \"pendientes\" ---\nelse if(lowerQuery.includes(\"pendientes\")||lowerQuery.includes(\"situación actual\")||lowerQuery.includes(\"cómo vamos\")){// Pendientes por equipo específico\nconst teamNameMatch=lowerQuery.match(/equipo\\s+([\\w\\s]+)/);if(teamNameMatch&&teamNameMatch[1]){const requestedTeamName=teamNameMatch[1].trim();const team=teams.find(t=>t.name.toLowerCase().includes(requestedTeamName));if(team){const report=teamTasksReport[team.id];if(report){const totalPending=report.pendingTasks+report.inProgressTasks+report.reviewTasks;aiResponse=\"El equipo \\\"\".concat(team.name,\"\\\" tiene un total de \").concat(totalPending,\" tareas pendientes. Espec\\xEDficamente, \").concat(report.pendingTasks,\" est\\xE1n en estado pendiente, \").concat(report.inProgressTasks,\" en progreso y \").concat(report.reviewTasks,\" en revisi\\xF3n.\");if(report.overdueTasks>0){aiResponse+=\" \\xA1Ojo! Tambi\\xE9n tienen \".concat(report.overdueTasks,\" tareas vencidas.\");}else{aiResponse+=\" \\xA1Y lo mejor es que no tienen tareas vencidas!\";}// Actualizar contexto\nnewContext.lastMentionedTeam=team;const teamMemberIds=users.filter(u=>u.teamId===team.id).map(u=>u.id);newContext.lastMentionedTasks=tasks.filter(t=>teamMemberIds.includes(t.assigneeId)&&t.status!=='completed');// Si hay tareas vencidas, guardar la más antigua\nif(report.overdueTasks>0){const teamOverdueTasks=tasks.filter(t=>teamMemberIds.includes(t.assigneeId)&&t.status!=='completed'&&new Date(t.dueDate)<new Date());const sortedOverdueTasks=[...teamOverdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOldestTask=sortedOverdueTasks[0];}newContext.lastDiscussedTopic=\"pendientes_equipo\";}else{aiResponse=\"No se encontraron tareas para el equipo \\\"\".concat(team.name,\"\\\". Parece que est\\xE1n al d\\xEDa o no tienen asignaciones.\");newContext.lastMentionedTeam=team;newContext.lastMentionedTasks=[];}}else{aiResponse=\"No encontr\\xE9 un equipo llamado \\\"\".concat(requestedTeamName,\"\\\". \\xBFPodr\\xEDas verificar el nombre o intentar con otro?\");}}// Pendientes por integrante específico\nelse if(lowerQuery.includes(\"integrante\")||lowerQuery.includes(\"colaborador\")||lowerQuery.includes(\"usuario\")){const userNameMatch=lowerQuery.match(/(?:integrante|colaborador|usuario)\\s+([\\w\\s]+)/);if(userNameMatch&&userNameMatch[1]){const requestedUserName=userNameMatch[1].trim();const user=users.find(u=>u.name.toLowerCase().includes(requestedUserName));if(user){const report=userTasksReport[user.id];if(report){const totalPending=report.pendingTasks+report.inProgressTasks+report.reviewTasks;aiResponse=\"\\\"\".concat(user.name,\"\\\" tiene un total de \").concat(totalPending,\" tareas pendientes. De estas, \").concat(report.pendingTasks,\" est\\xE1n en estado pendiente, \").concat(report.inProgressTasks,\" en progreso y \").concat(report.reviewTasks,\" en revisi\\xF3n.\");if(report.overdueTasks>0){aiResponse+=\" \\xA1Cuidado! Tiene \".concat(report.overdueTasks,\" tareas vencidas.\");}else{aiResponse+=\" \\xA1Va muy bien, no tiene tareas vencidas!\";}// Actualizar contexto\nnewContext.lastMentionedUser=user;newContext.lastMentionedTasks=tasks.filter(t=>t.assigneeId===user.id&&t.status!=='completed');// Si hay tareas vencidas, guardar la más antigua\nif(report.overdueTasks>0){const userOverdueTasks=tasks.filter(t=>t.assigneeId===user.id&&t.status!=='completed'&&new Date(t.dueDate)<new Date());const sortedOverdueTasks=[...userOverdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;newContext.lastMentionedOldestTask=sortedOverdueTasks[0];}newContext.lastDiscussedTopic=\"pendientes_usuario\";}else{aiResponse=\"No se encontraron tareas para \\\"\".concat(user.name,\"\\\". Parece que est\\xE1 al d\\xEDa o no tiene asignaciones.\");newContext.lastMentionedUser=user;newContext.lastMentionedTasks=[];}}else{aiResponse=\"No encontr\\xE9 un integrante llamado \\\"\".concat(requestedUserName,\"\\\". \\xBFPodr\\xEDas verificar el nombre?\");}}else{// Resumen general de pendientes por integrante\nconst userSummaries=users.map(user=>{const report=userTasksReport[user.id];if(report&&(report.pendingTasks+report.inProgressTasks+report.reviewTasks>0||report.overdueTasks>0)){return\"\\\"\".concat(user.name,\"\\\" tiene \").concat(report.pendingTasks+report.inProgressTasks+report.reviewTasks,\" pendientes (\").concat(report.overdueTasks,\" vencidas).\");}return null;}).filter(Boolean).join('\\n');if(userSummaries){aiResponse=\"Aqu\\xED tienes un resumen de los pendientes por integrante:\\n\".concat(userSummaries);// Actualizar contexto - todas las tareas pendientes\nnewContext.lastMentionedTasks=tasks.filter(t=>t.status!=='completed');}else{aiResponse=\"¡Felicidades! Parece que todos los integrantes están al día con sus tareas pendientes.\";newContext.lastMentionedTasks=[];}}}else{// Resumen general de pendientes (todos los equipos/usuarios)\nconst totalPendingTasks=tasks.filter(t=>t.status!=='completed').length;const totalOverdueTasks=tasks.filter(t=>new Date(t.dueDate)<new Date()&&t.status!=='completed').length;if(totalPendingTasks>0){aiResponse=\"En general, tenemos \".concat(totalPendingTasks,\" tareas pendientes en el sistema. De estas, \").concat(totalOverdueTasks,\" est\\xE1n vencidas.\");// Agregar información sobre la tarea más atrasada\nif(totalOverdueTasks>0){const overdueTasks=getAllOverdueTasks();const sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));const oldestTask=sortedOverdueTasks[0];const daysOverdue=getDaysOverdue(oldestTask.dueDate);aiResponse+=\" La tarea m\\xE1s atrasada es \\\"\".concat(oldestTask.title,\"\\\" asignada a \").concat(getUserNameById(oldestTask.assigneeId),\", con \").concat(daysOverdue,\" d\\xEDas de atraso. \\xA1Es importante revisar las tareas vencidas para evitar problemas!\");// Actualizar contexto\nnewContext.lastMentionedOldestTask=oldestTask;}// Actualizar contexto\nnewContext.lastMentionedTasks=tasks.filter(t=>t.status!=='completed');newContext.lastMentionedOverdueTasks=tasks.filter(t=>new Date(t.dueDate)<new Date()&&t.status!=='completed');// Ordenar tareas vencidas por fecha\nif(totalOverdueTasks>0){const sortedOverdueTasks=[...newContext.lastMentionedOverdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));newContext.lastMentionedSortedOverdueTasks=sortedOverdueTasks;}newContext.lastDiscussedTopic=\"pendientes_general\";}else{aiResponse=\"¡Excelente! No hay tareas pendientes en este momento. ¡Todo está al día!\";newContext.lastMentionedTasks=[];newContext.lastMentionedOverdueTasks=[];newContext.lastMentionedSortedOverdueTasks=[];newContext.lastMentionedOldestTask=null;}}}// --- Fin de respuestas flexibles para \"pendientes\" ---\n// Preguntas sobre tareas por cliente\nelse if(lowerQuery.includes(\"cliente\")&&(lowerQuery.includes(\"tareas\")||lowerQuery.includes(\"pendientes\"))){const clientNameMatch=lowerQuery.match(/cliente\\s+([\\w\\s]+)/);if(clientNameMatch&&clientNameMatch[1]){const requestedClientName=clientNameMatch[1].trim();const client=clients.find(c=>c.name.toLowerCase().includes(requestedClientName));if(client){const clientTasks=tasks.filter(t=>t.clientId===client.id);const pendingTasks=clientTasks.filter(t=>t.status!=='completed');const overdueTasks=clientTasks.filter(t=>new Date(t.dueDate)<new Date()&&t.status!=='completed');if(clientTasks.length>0){aiResponse=\"El cliente \\\"\".concat(client.name,\"\\\" tiene un total de \").concat(clientTasks.length,\" tareas, de las cuales \").concat(pendingTasks.length,\" est\\xE1n pendientes\");if(overdueTasks.length>0){aiResponse+=\" y \".concat(overdueTasks.length,\" est\\xE1n vencidas.\");// Información sobre la tarea vencida más antigua de este cliente\nif(overdueTasks.length>0){const sortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));const oldestTask=sortedOverdueTasks[0];const oldestTaskDueDate=formatDate(oldestTask.dueDate);const daysOverdue=getDaysOverdue(oldestTask.dueDate);aiResponse+=\" La tarea vencida m\\xE1s antigua es \\\"\".concat(oldestTask.title,\"\\\", asignada a \").concat(getUserNameById(oldestTask.assigneeId),\", que venci\\xF3 el \").concat(oldestTaskDueDate,\" (hace \").concat(daysOverdue,\" d\\xEDas).\");// Actualizar contexto\nnewContext.lastMentionedOldestTask=oldestTask;}}else{aiResponse+=\". \\xA1Buenas noticias! No hay tareas vencidas para este cliente.\";}// Actualizar contexto\nnewContext.lastMentionedClient=client;newContext.lastMentionedTasks=pendingTasks;newContext.lastMentionedOverdueTasks=overdueTasks;if(overdueTasks.length>0){newContext.lastMentionedSortedOverdueTasks=[...overdueTasks].sort((a,b)=>new Date(a.dueDate)-new Date(b.dueDate));}newContext.lastDiscussedTopic=\"tareas_cliente\";}else{aiResponse=\"No se encontraron tareas para el cliente \\\"\".concat(client.name,\"\\\".\");newContext.lastMentionedClient=client;newContext.lastMentionedTasks=[];newContext.lastMentionedOverdueTasks=[];newContext.lastMentionedSortedOverdueTasks=[];newContext.lastMentionedOldestTask=null;}}else{aiResponse=\"No encontr\\xE9 un cliente llamado \\\"\".concat(requestedClientName,\"\\\". \\xBFPodr\\xEDas verificar el nombre?\");}}else{// Resumen general de tareas por cliente\nconst clientSummaries=clients.map(client=>{const clientTasks=tasks.filter(t=>t.clientId===client.id);const pendingTasks=clientTasks.filter(t=>t.status!=='completed');const overdueTasks=clientTasks.filter(t=>new Date(t.dueDate)<new Date()&&t.status!=='completed');if(clientTasks.length>0){return\"\\\"\".concat(client.name,\"\\\": \").concat(pendingTasks.length,\" pendientes, \").concat(overdueTasks.length,\" vencidas.\");}return null;}).filter(Boolean).join('\\n');if(clientSummaries){aiResponse=\"Aqu\\xED tienes un resumen de tareas por cliente:\\n\".concat(clientSummaries);// Actualizar contexto - todas las tareas pendientes\nnewContext.lastMentionedTasks=tasks.filter(t=>t.status!=='completed');}else{aiResponse=\"No hay tareas asignadas a ningún cliente en este momento.\";newContext.lastMentionedTasks=[];}}}// Preguntas sobre tareas completadas (más directas)\nelse if(lowerQuery.includes(\"tareas completadas\")||lowerQuery.includes(\"cuántas completadas\")){const completedTasks=tasks.filter(t=>t.status==='completed');const completedTasksCount=completedTasks.length;if(completedTasksCount>0){// Ordenar por fecha de completado (más reciente primero)\nconst sortedCompletedTasks=[...completedTasks].sort((a,b)=>new Date(b.completedAt||b.dueDate)-new Date(a.completedAt||a.dueDate));const latestTask=sortedCompletedTasks[0];const latestTaskCompletedDate=formatDate(latestTask.completedAt||latestTask.dueDate);aiResponse=\"Se han completado \".concat(completedTasksCount,\" tareas hasta ahora. La tarea completada m\\xE1s reciente es \\\"\").concat(latestTask.title,\"\\\" para el cliente \").concat(getClientNameById(latestTask.clientId),\", completada el \").concat(latestTaskCompletedDate,\".\");// Agregar información sobre quién ha completado más tareas\nconst completionsByUser={};completedTasks.forEach(task=>{const userId=task.assigneeId;completionsByUser[userId]=(completionsByUser[userId]||0)+1;});let topPerformer=null;let maxCompletions=0;for(const userId in completionsByUser){if(completionsByUser[userId]>maxCompletions){maxCompletions=completionsByUser[userId];topPerformer=userId;}}if(topPerformer){const topPerformerName=getUserNameById(parseInt(topPerformer));aiResponse+=\" \".concat(topPerformerName,\" es quien m\\xE1s tareas ha completado, con un total de \").concat(maxCompletions,\".\");}// Actualizar contexto\nnewContext.lastMentionedTasks=completedTasks;newContext.lastDiscussedTopic=\"tareas_completadas\";}else{aiResponse=\"Aún no hay tareas completadas. ¡Manos a la obra, que el tiempo vuela!\";newContext.lastMentionedTasks=[];}}// Preguntas sobre rendimiento de equipos\nelse if(lowerQuery.includes(\"rendimiento\")&&lowerQuery.includes(\"equipo\")){const teamNameMatch=lowerQuery.match(/equipo\\s+([\\w\\s]+)/);if(teamNameMatch&&teamNameMatch[1]){const requestedTeamName=teamNameMatch[1].trim();const team=teams.find(t=>t.name.toLowerCase().includes(requestedTeamName));if(team){const report=teamTasksReport[team.id];if(report){const completionRate=(report.completedTasks/report.totalTasks*100).toFixed(1);const overdueRate=(report.overdueTasks/report.totalTasks*100).toFixed(1);aiResponse=\"El equipo \\\"\".concat(team.name,\"\\\" tiene una tasa de completado del \").concat(completionRate,\"% (\").concat(report.completedTasks,\" de \").concat(report.totalTasks,\" tareas). \");if(report.overdueTasks>0){aiResponse+=\"Sin embargo, tienen un \".concat(overdueRate,\"% de tareas vencidas (\").concat(report.overdueTasks,\" tareas). \");}else{aiResponse+=\"Y lo mejor es que no tienen tareas vencidas. \";}// Información sobre el rendimiento de los miembros del equipo\nif(Object.keys(report.memberPerformance).length>0){const memberPerformance=Object.values(report.memberPerformance);const bestPerformer=memberPerformance.reduce((best,current)=>{return current.completedTasks>best.completedTasks?current:best;},{memberName:'',completedTasks:0});if(bestPerformer.completedTasks>0){aiResponse+=\"\".concat(bestPerformer.memberName,\" es el miembro con mejor rendimiento, habiendo completado \").concat(bestPerformer.completedTasks,\" tareas.\");}}// Actualizar contexto\nnewContext.lastMentionedTeam=team;const teamMemberIds=users.filter(u=>u.teamId===team.id).map(u=>u.id);newContext.lastMentionedTasks=tasks.filter(t=>teamMemberIds.includes(t.assigneeId));newContext.lastDiscussedTopic=\"rendimiento_equipo\";}else{aiResponse=\"No se encontraron datos de rendimiento para el equipo \\\"\".concat(team.name,\"\\\".\");newContext.lastMentionedTeam=team;}}else{aiResponse=\"No encontr\\xE9 un equipo llamado \\\"\".concat(requestedTeamName,\"\\\". \\xBFPodr\\xEDas verificar el nombre?\");}}else{// Resumen general de rendimiento por equipo\nconst teamPerformanceSummaries=teams.map(team=>{const report=teamTasksReport[team.id];if(report&&report.totalTasks>0){const completionRate=(report.completedTasks/report.totalTasks*100).toFixed(1);return\"\\\"\".concat(team.name,\"\\\": \").concat(completionRate,\"% de tareas completadas (\").concat(report.completedTasks,\"/\").concat(report.totalTasks,\").\");}return null;}).filter(Boolean).join('\\n');if(teamPerformanceSummaries){aiResponse=\"Aqu\\xED tienes un resumen del rendimiento por equipo:\\n\".concat(teamPerformanceSummaries);// Actualizar contexto - todas las tareas\nnewContext.lastMentionedTasks=tasks;newContext.lastDiscussedTopic=\"rendimiento_equipos\";}else{aiResponse=\"No hay datos de rendimiento disponibles para los equipos.\";newContext.lastMentionedTasks=[];}}}// Saludos\nelse if(lowerQuery.includes(\"hola\")||lowerQuery.includes(\"qué tal\")||lowerQuery.includes(\"buenos días\")||lowerQuery.includes(\"buenas tardes\")){aiResponse=\"¡Hola! Soy tu asistente de informes. ¿En qué puedo ayudarte hoy con los datos de tus equipos y tareas? Pregúntame sobre pendientes, vencidas o el estado de algún equipo o integrante.\";}// Preguntas generales sobre la IA\nelse if(lowerQuery.includes(\"qué puedes hacer\")||lowerQuery.includes(\"cómo funcionas\")||lowerQuery.includes(\"ayuda\")){aiResponse=\"Puedo darte resúmenes sobre tareas pendientes (generales, por equipo o por integrante), tareas vencidas, y tareas completadas. También puedo decirte cuándo venció la tarea más antigua, el rendimiento de los equipos, y mucho más. Solo pregúntame algo como: '¿Cómo vamos con los pendientes?', 'Cuéntame sobre el equipo Impuestos', '¿Cuándo venció la tarea más antigua?' o '¿Qué tareas tiene Ana López?'\";}// Actualizar el contexto de la conversación\nsetConversationContext(newContext);setTimeout(()=>{// Actualizar el historial con la respuesta\nsetChatHistory(prevHistory=>{const newHistory=[...prevHistory];if(newHistory.length>0){newHistory[newHistory.length-1]=_objectSpread(_objectSpread({},newHistory[newHistory.length-1]),{},{response:aiResponse});}else{// Si por alguna razón no hay historial, agregar la consulta y respuesta\nnewHistory.push({type:'query',text:userQuery,response:aiResponse});}return newHistory;});setResponse('');setIsLoading(false);// Scroll al final del chat\nif(chatContainerRef.current){chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;}},1500);// Simula un tiempo de procesamiento de la IA\n};const handleSubmit=e=>{e.preventDefault();if(query.trim()){// Guardar la consulta en el historial\nsetChatHistory([...chatHistory,{type:'query',text:query}]);setResponse('');// Limpiar respuesta anterior\ngenerateAIResponse(query);setQuery('');// Limpiar input\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white shadow rounded-lg p-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-gray-900 mb-4\",children:\"Asistente de Informes con IA\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500 mb-6\",children:\"Preg\\xFAntame sobre el estado de las tareas de tus equipos o integrantes. Por ejemplo: \\\"\\xBFC\\xF3mo vamos con los pendientes?\\\", \\\"\\xBFCu\\xE1ntas tareas pendientes tiene el equipo Impuestos?\\\", \\\"\\xBFQu\\xE9 tareas tiene Ana L\\xF3pez?\\\", \\\"\\xBFCu\\xE1ndo venci\\xF3 la tarea m\\xE1s antigua?\\\".\"}),/*#__PURE__*/_jsxs(\"div\",{ref:chatContainerRef,className:\"border border-gray-200 rounded-md p-4 h-64 overflow-y-auto mb-4 bg-gray-50\",children:[chatHistory.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-gray-800\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-gray-600\",children:\"T\\xFA: \"}),item.text]}),item.response&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-gray-800 whitespace-pre-line mt-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-600\",children:\"Asistente: \"}),item.response]})]},index)),isLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center mt-2\",children:[/*#__PURE__*/_jsxs(\"svg\",{className:\"animate-spin h-5 w-5 text-blue-500 mr-3\",xmlns:\"http://www.w3.org/2000/svg\",fill:\"none\",viewBox:\"0 0 24 24\",children:[/*#__PURE__*/_jsx(\"circle\",{className:\"opacity-25\",cx:\"12\",cy:\"12\",r:\"10\",stroke:\"currentColor\",strokeWidth:\"4\"}),/*#__PURE__*/_jsx(\"path\",{className:\"opacity-75\",fill:\"currentColor\",d:\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"})]}),/*#__PURE__*/_jsx(\"span\",{className:\"text-gray-600\",children:\"Pensando...\"})]}),!isLoading&&chatHistory.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-500 italic\",children:\"Esperando tu pregunta...\"})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"flex\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:query,onChange:e=>setQuery(e.target.value),placeholder:\"Escribe tu pregunta aqu\\xED...\",className:\"flex-1 px-4 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",disabled:isLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"px-6 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\",disabled:isLoading||!query.trim(),children:\"Preguntar\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-gray-500\",children:\"Sugerencias de preguntas:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 flex flex-wrap gap-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setQuery(\"¿Cómo vamos con los pendientes?\"),className:\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",children:\"\\xBFC\\xF3mo vamos con los pendientes?\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setQuery(\"¿Cuál es el pendiente más atrasado?\"),className:\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",children:\"\\xBFCu\\xE1l es el m\\xE1s atrasado?\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setQuery(\"¿Quién tiene el pendiente más atrasado?\"),className:\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",children:\"\\xBFQui\\xE9n tiene el m\\xE1s atrasado?\"})]})]})]});};export default AIReportAssistant;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","AIReportAssistant","_ref","tasks","users","teams","clients","currentUser","userTasksReport","teamTasksReport","clientTasksReport","query","setQuery","response","setResponse","isLoading","setIsLoading","chatHistory","setChatHistory","conversationContext","setConversationContext","lastMentionedTasks","lastMentionedUser","lastMentionedTeam","lastMentionedClient","lastMentionedOverdueTasks","lastMentionedHighPriorityTasks","lastMentionedSortedOverdueTasks","lastMentionedOldestTask","lastDiscussedTopic","chatContainerRef","getUserNameById","id","_users$find","find","u","name","getTeamNameById","_teams$find","t","getClientNameById","_clients$find","c","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","getDaysOverdue","dueDate","today","due","diffTime","Math","abs","ceil","getAllOverdueTasks","filter","status","getOldestOverdueTask","overdueTasks","length","reduce","oldest","current","generateAIResponse","userQuery","aiResponse","newContext","_objectSpread","lowerQuery","toLowerCase","trim","includes","forEach","task","index","concat","title","assigneeId","match","numMatch","numTasks","parseInt","sortedOverdueTasks","sort","a","b","topTasks","slice","daysOverdue","priorityText","priority","clientId","oldestTask","oldestTaskDueDate","assigneeName","clientName","highPriorityTasks","nameMatch","requestedName","user","userTasks","pendingCount","inProgressCount","reviewCount","overdueCount","overdueDetails","map","join","upcomingTasks","upcomingDetails","overdueTasksCount","highPriorityCount","teamNameMatch","requestedTeamName","team","report","totalPending","pendingTasks","inProgressTasks","reviewTasks","teamMemberIds","teamId","teamOverdueTasks","userNameMatch","requestedUserName","userOverdueTasks","userSummaries","Boolean","totalPendingTasks","totalOverdueTasks","clientNameMatch","requestedClientName","client","clientTasks","clientSummaries","completedTasks","completedTasksCount","sortedCompletedTasks","completedAt","latestTask","latestTaskCompletedDate","completionsByUser","userId","topPerformer","maxCompletions","topPerformerName","completionRate","totalTasks","toFixed","overdueRate","Object","keys","memberPerformance","values","bestPerformer","best","memberName","teamPerformanceSummaries","setTimeout","prevHistory","newHistory","push","type","text","scrollTop","scrollHeight","handleSubmit","e","preventDefault","className","children","ref","item","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","onSubmit","value","onChange","target","placeholder","disabled","onClick"],"sources":["C:/Contabia/frontend/src/components/AIReportAssistant.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst AIReportAssistant = ({ tasks, users, teams, clients, currentUser, userTasksReport, teamTasksReport, clientTasksReport }) => {\n  const [query, setQuery] = useState('');\n  const [response, setResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [conversationContext, setConversationContext] = useState({\n    lastMentionedTasks: null, // Últimas tareas mencionadas en detalle\n    lastMentionedUser: null,\n    lastMentionedTeam: null,\n    lastMentionedClient: null,\n    lastMentionedOverdueTasks: null, // Todas las tareas vencidas mencionadas\n    lastMentionedHighPriorityTasks: null,\n    lastMentionedSortedOverdueTasks: null, // Tareas vencidas ordenadas por antigüedad\n    lastMentionedOldestTask: null,\n    lastDiscussedTopic: null // Tema general de la última interacción\n  });\n  const chatContainerRef = useRef(null);\n\n  // Helper para obtener el nombre de un usuario por ID\n  const getUserNameById = (id) => users.find(u => u.id === id)?.name || 'Desconocido';\n  // Helper para obtener el nombre de un equipo por ID\n  const getTeamNameById = (id) => teams.find(t => t.id === id)?.name || 'Desconocido';\n  // Helper para obtener el nombre de un cliente por ID\n  const getClientNameById = (id) => clients.find(c => c.id === id)?.name || 'Desconocido';\n  \n  // Helper para formatear fechas\n  const formatDate = (dateString) => {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString('es-ES', options);\n  };\n  \n  // Helper para calcular días de retraso\n  const getDaysOverdue = (dueDate) => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = Math.abs(today - due);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  // Obtener todas las tareas vencidas\n  const getAllOverdueTasks = () => {\n    return tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n  };\n\n  // Obtener la tarea vencida más antigua\n  const getOldestOverdueTask = () => {\n    const overdueTasks = getAllOverdueTasks();\n    if (overdueTasks.length === 0) return null;\n    \n    return overdueTasks.reduce((oldest, current) => {\n      return new Date(current.dueDate) < new Date(oldest.dueDate) ? current : oldest;\n    }, overdueTasks[0]);\n  };\n\n  // Simulación de la IA\n  const generateAIResponse = (userQuery) => {\n    setIsLoading(true);\n    let aiResponse = \"Lo siento, no pude encontrar información relevante para tu consulta. Intenta preguntar de otra manera.\";\n    let newContext = { ...conversationContext };\n\n    const lowerQuery = userQuery.toLowerCase().trim();\n\n    // --- Manejo de preguntas de seguimiento sobre tareas específicas ---\n    if (\n      (lowerQuery.includes(\"a quién\") || lowerQuery.includes(\"a quien\")) && \n      (lowerQuery.includes(\"están asignadas\") || lowerQuery.includes(\"está asignada\")) &&\n      (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\"))\n    ) {\n      if (newContext.lastMentionedTasks && newContext.lastMentionedTasks.length > 0) {\n        aiResponse = `Las tareas que mencionaste están asignadas a:\\n`;\n        newContext.lastMentionedTasks.forEach((task, index) => {\n          aiResponse += `${index + 1}. \"${task.title}\" está asignada a ${getUserNameById(task.assigneeId)}.\\n`;\n        });\n      } else {\n        aiResponse = \"Lo siento, no tengo un contexto claro de a qué tareas te refieres. ¿Podrías especificar?\";\n      }\n    }\n    // Preguntas sobre las N tareas con mayor atraso\n    else if (\n      (lowerQuery.includes(\"dime\") || lowerQuery.includes(\"muéstrame\")) &&\n      (lowerQuery.includes(\"las\") || lowerQuery.includes(\"los\")) &&\n      (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\")) &&\n      (lowerQuery.includes(\"mayor atraso\") || lowerQuery.includes(\"más atraso\") || lowerQuery.includes(\"más antiguas\")) &&\n      (lowerQuery.match(/\\d+/)) // Busca un número en la consulta\n    ) {\n      const numMatch = lowerQuery.match(/\\d+/);\n      const numTasks = parseInt(numMatch[0]);\n      \n      const overdueTasks = getAllOverdueTasks();\n      \n      if (overdueTasks.length > 0) {\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const topTasks = sortedOverdueTasks.slice(0, numTasks);\n        \n        if (topTasks.length > 0) {\n          aiResponse = `Aquí tienes las ${topTasks.length} tareas con mayor atraso:\\n`;\n          topTasks.forEach((task, index) => {\n            const daysOverdue = getDaysOverdue(task.dueDate);\n            const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                                task.priority === 'medium' ? '(prioridad media)' : \n                                '(baja prioridad)';\n            \n            aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n          });\n          \n          // Actualizar contexto para futuras preguntas de seguimiento\n          newContext.lastMentionedTasks = topTasks;\n          newContext.lastMentionedOverdueTasks = topTasks;\n          newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          newContext.lastDiscussedTopic = \"top_n_tareas_atrasadas\";\n        } else {\n          aiResponse = `No hay ${numTasks} tareas vencidas para mostrar. Solo hay ${overdueTasks.length} tareas vencidas en total.`;\n        }\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n      }\n    }\n    // Preguntas sobre quién tiene el pendiente más atrasado\n    else if (\n      (lowerQuery.includes(\"quién\") || lowerQuery.includes(\"quien\")) && \n      (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && \n      (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\"))\n    ) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n      \n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `${assigneeName} tiene la tarea más atrasada. Se trata de \"${oldestTask.title}\" para el cliente ${clientName}, que venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"persona_con_tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Preguntas sobre cuál es el pendiente más atrasado\n    else if (\n      (lowerQuery.includes(\"cuál\") || lowerQuery.includes(\"cual\")) && \n      (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && \n      (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\")) ||\n      (lowerQuery.includes(\"más\") && lowerQuery.includes(\"atrasado\"))\n    ) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n      \n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `La tarea más atrasada es \"${oldestTask.title}\" para el cliente ${clientName}, asignada a ${assigneeName}. Venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Preguntas sobre tareas más antiguas respecto a su vencimiento\n    else if (\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"antiguas\") && lowerQuery.includes(\"vencimiento\")) ||\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"vencidas\") && lowerQuery.includes(\"antiguas\")) ||\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"mayor\") && lowerQuery.includes(\"atraso\"))\n    ) {\n      const overdueTasks = getAllOverdueTasks();\n      \n      if (overdueTasks.length > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        \n        aiResponse = `Las tareas vencidas ordenadas por antigüedad son:\\n`;\n        \n        sortedOverdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                              task.priority === 'medium' ? '(prioridad media)' : \n                              '(baja prioridad)';\n          \n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n        \n        // Actualizar contexto\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n        newContext.lastDiscussedTopic = \"tareas_ordenadas_por_antiguedad\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Manejo de preguntas de seguimiento basadas en contexto\n    else if (\n      (lowerQuery.includes(\"cuáles\") || lowerQuery.includes(\"cuales\") || lowerQuery.includes(\"qué\") || lowerQuery.includes(\"que\")) && \n      (lowerQuery.includes(\"son\") || lowerQuery.includes(\"es\")) && \n      (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\") || lowerQuery.includes(\"esas tareas\") || lowerQuery.includes(\"estas tareas\"))\n    ) {\n      // El usuario está preguntando por tareas mencionadas anteriormente\n      if (newContext.lastMentionedHighPriorityTasks && newContext.lastMentionedHighPriorityTasks.length > 0) {\n        const highPriorityTasks = newContext.lastMentionedHighPriorityTasks;\n        \n        aiResponse = `Las tareas de alta prioridad que mencioné son:\\n`;\n        highPriorityTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días.\\n`;\n        });\n        \n        newContext.lastDiscussedTopic = \"tareas_alta_prioridad\";\n      } \n      else if (newContext.lastMentionedOverdueTasks && newContext.lastMentionedOverdueTasks.length > 0) {\n        const overdueTasks = newContext.lastMentionedOverdueTasks;\n        \n        aiResponse = `Las tareas vencidas que mencioné son:\\n`;\n        overdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                              task.priority === 'medium' ? '(prioridad media)' : \n                              '(baja prioridad)';\n          \n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n        \n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      }\n      else {\n        aiResponse = \"Lo siento, no he mencionado tareas específicas en nuestra conversación anterior. ¿Te gustaría que te muestre las tareas vencidas o pendientes?\";\n      }\n    }\n    // Preguntas sobre la tarea vencida más antigua\n    else if (\n      lowerQuery.includes(\"tarea vencida más antigua\") || \n      lowerQuery.includes(\"vencimiento más antiguo\") || \n      lowerQuery.includes(\"vencida hace más tiempo\") ||\n      (lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"vencida\") && lowerQuery.includes(\"más tiempo\")) ||\n      (lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"está vencida\") && lowerQuery.includes(\"más tiempo\"))\n    ) {\n      const oldestTask = getOldestOverdueTask();\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `La tarea vencida hace más tiempo es \"${oldestTask.title}\" para el cliente ${clientName}. Está asignada a ${assigneeName} y venció el ${oldestTaskDueDate}, hace ${daysOverdue} días. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Esta tarea es de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Esta tarea es de prioridad media.`;\n        } else {\n          aiResponse += `Esta tarea es de baja prioridad, pero aún así está vencida.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedTasks = [oldestTask];\n        newContext.lastMentionedOldestTask = oldestTask;\n        \n        // También guardar todas las tareas vencidas ordenadas\n        const overdueTasks = getAllOverdueTasks();\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastDiscussedTopic = \"tarea_mas_antigua\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Pendientes por nombre específico (sin necesidad de la palabra \"integrante\" o \"colaborador\")\n    else if (lowerQuery.match(/pendientes\\s+de\\s+([\\w\\s]+)/) || lowerQuery.match(/tareas\\s+de\\s+([\\w\\s]+)/)) {\n      const nameMatch = lowerQuery.match(/(?:pendientes|tareas)\\s+de\\s+([\\w\\s]+)/);\n      if (nameMatch && nameMatch[1]) {\n        const requestedName = nameMatch[1].trim();\n        const user = users.find(u => u.name.toLowerCase().includes(requestedName.toLowerCase()));\n        \n        if (user) {\n          const userTasks = tasks.filter(t => t.assigneeId === user.id && t.status !== 'completed');\n          \n          if (userTasks.length > 0) {\n            const pendingCount = userTasks.filter(t => t.status === 'pending').length;\n            const inProgressCount = userTasks.filter(t => t.status === 'in_progress').length;\n            const reviewCount = userTasks.filter(t => t.status === 'review').length;\n            const overdueCount = userTasks.filter(t => new Date(t.dueDate) < new Date()).length;\n            \n            aiResponse = `${user.name} tiene ${userTasks.length} tareas pendientes en total. De estas, ${pendingCount} están en estado pendiente, ${inProgressCount} en progreso y ${reviewCount} en revisión.`;\n            \n            if (overdueCount > 0) {\n              aiResponse += ` ¡Atención! ${overdueCount} de estas tareas están vencidas.`;\n              \n              // Detallar las tareas vencidas\n              const overdueTasks = userTasks.filter(t => new Date(t.dueDate) < new Date());\n              const overdueDetails = overdueTasks.map(task => {\n                const daysOverdue = getDaysOverdue(task.dueDate);\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vencida hace ${daysOverdue} días)`;\n              }).join(', ');\n              \n              aiResponse += ` Las tareas vencidas son: ${overdueDetails}.`;\n            }\n            \n            // Listar las próximas tareas a vencer\n            const upcomingTasks = userTasks\n              .filter(t => new Date(t.dueDate) >= new Date())\n              .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\n              .slice(0, 3);\n              \n            if (upcomingTasks.length > 0) {\n              const upcomingDetails = upcomingTasks.map(task => {\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vence el ${formatDate(task.dueDate)})`;\n              }).join(', ');\n              \n              aiResponse += ` Las próximas tareas a vencer son: ${upcomingDetails}.`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = userTasks;\n            \n            // Si hay tareas vencidas, guardar la más antigua\n            if (overdueCount > 0) {\n              const sortedOverdueTasks = [...userTasks.filter(t => new Date(t.dueDate) < new Date())].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_usuario\";\n          } else {\n            aiResponse = `¡Buenas noticias! ${user.name} no tiene tareas pendientes en este momento.`;\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré a ningún integrante llamado \"${requestedName}\". ¿Podrías verificar el nombre?`;\n        }\n      }\n    }\n    \n    // Preguntas sobre tareas vencidas (más directas)\n    else if (lowerQuery.includes(\"tareas vencidas\") || lowerQuery.includes(\"cuántas vencidas\")) {\n      const overdueTasks = getAllOverdueTasks();\n      const overdueTasksCount = overdueTasks.length;\n      \n      if (overdueTasksCount > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const oldestTask = sortedOverdueTasks[0];\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        \n        // Filtrar tareas de alta prioridad\n        const highPriorityTasks = sortedOverdueTasks.filter(t => t.priority === 'high');\n        const highPriorityCount = highPriorityTasks.length;\n        \n        aiResponse = `Actualmente hay ${overdueTasksCount} tareas vencidas en el sistema. La tarea vencida más antigua es \"${oldestTask.title}\" para el cliente ${getClientNameById(oldestTask.clientId)}, asignada a ${getUserNameById(oldestTask.assigneeId)}. Esta tarea venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n        \n        if (overdueTasksCount > 1 && highPriorityCount > 0) {\n          aiResponse += ` De las tareas vencidas, ${highPriorityCount} son de alta prioridad y requieren atención inmediata.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedHighPriorityTasks = highPriorityTasks;\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      } else {\n        aiResponse = \"¡Excelente! No hay tareas vencidas en este momento. ¡Vamos por buen camino!\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedHighPriorityTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // --- Respuestas más flexibles para \"pendientes\" ---\n    else if (lowerQuery.includes(\"pendientes\") || lowerQuery.includes(\"situación actual\") || lowerQuery.includes(\"cómo vamos\")) {\n      // Pendientes por equipo específico\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n            aiResponse = `El equipo \"${team.name}\" tiene un total de ${totalPending} tareas pendientes. Específicamente, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n            if (report.overdueTasks > 0) {\n              aiResponse += ` ¡Ojo! También tienen ${report.overdueTasks} tareas vencidas.`;\n            } else {\n              aiResponse += ` ¡Y lo mejor es que no tienen tareas vencidas!`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => \n              teamMemberIds.includes(t.assigneeId) && \n              t.status !== 'completed'\n            );\n            \n            // Si hay tareas vencidas, guardar la más antigua\n            if (report.overdueTasks > 0) {\n              const teamOverdueTasks = tasks.filter(t => \n                teamMemberIds.includes(t.assigneeId) && \n                t.status !== 'completed' &&\n                new Date(t.dueDate) < new Date()\n              );\n              \n              const sortedOverdueTasks = [...teamOverdueTasks].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n              \n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_equipo\";\n          } else {\n            aiResponse = `No se encontraron tareas para el equipo \"${team.name}\". Parece que están al día o no tienen asignaciones.`;\n            newContext.lastMentionedTeam = team;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre o intentar con otro?`;\n        }\n      } \n      // Pendientes por integrante específico\n      else if (lowerQuery.includes(\"integrante\") || lowerQuery.includes(\"colaborador\") || lowerQuery.includes(\"usuario\")) {\n        const userNameMatch = lowerQuery.match(/(?:integrante|colaborador|usuario)\\s+([\\w\\s]+)/);\n        if (userNameMatch && userNameMatch[1]) {\n          const requestedUserName = userNameMatch[1].trim();\n          const user = users.find(u => u.name.toLowerCase().includes(requestedUserName));\n          if (user) {\n            const report = userTasksReport[user.id];\n            if (report) {\n              const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n              aiResponse = `\"${user.name}\" tiene un total de ${totalPending} tareas pendientes. De estas, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n              if (report.overdueTasks > 0) {\n                aiResponse += ` ¡Cuidado! Tiene ${report.overdueTasks} tareas vencidas.`;\n              } else {\n                aiResponse += ` ¡Va muy bien, no tiene tareas vencidas!`;\n              }\n              \n              // Actualizar contexto\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = tasks.filter(t => \n                t.assigneeId === user.id && \n                t.status !== 'completed'\n              );\n              \n              // Si hay tareas vencidas, guardar la más antigua\n              if (report.overdueTasks > 0) {\n                const userOverdueTasks = tasks.filter(t => \n                  t.assigneeId === user.id && \n                  t.status !== 'completed' &&\n                  new Date(t.dueDate) < new Date()\n                );\n                \n                const sortedOverdueTasks = [...userOverdueTasks].sort(\n                  (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n                );\n                \n                newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n                newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n              }\n              newContext.lastDiscussedTopic = \"pendientes_usuario\";\n            } else {\n              aiResponse = `No se encontraron tareas para \"${user.name}\". Parece que está al día o no tiene asignaciones.`;\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = [];\n            }\n          } else {\n            aiResponse = `No encontré un integrante llamado \"${requestedUserName}\". ¿Podrías verificar el nombre?`;\n          }\n        } else {\n          // Resumen general de pendientes por integrante\n          const userSummaries = users.map(user => {\n            const report = userTasksReport[user.id];\n            if (report && (report.pendingTasks + report.inProgressTasks + report.reviewTasks > 0 || report.overdueTasks > 0)) {\n              return `\"${user.name}\" tiene ${report.pendingTasks + report.inProgressTasks + report.reviewTasks} pendientes (${report.overdueTasks} vencidas).`;\n            }\n            return null;\n          }).filter(Boolean).join('\\n');\n          \n          if (userSummaries) {\n            aiResponse = `Aquí tienes un resumen de los pendientes por integrante:\\n${userSummaries}`;\n            \n            // Actualizar contexto - todas las tareas pendientes\n            newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          } else {\n            aiResponse = \"¡Felicidades! Parece que todos los integrantes están al día con sus tareas pendientes.\";\n            newContext.lastMentionedTasks = [];\n          }\n        }\n      } else {\n        // Resumen general de pendientes (todos los equipos/usuarios)\n        const totalPendingTasks = tasks.filter(t => t.status !== 'completed').length;\n        const totalOverdueTasks = tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed').length;\n        \n        if (totalPendingTasks > 0) {\n          aiResponse = `En general, tenemos ${totalPendingTasks} tareas pendientes en el sistema. De estas, ${totalOverdueTasks} están vencidas.`;\n          \n          // Agregar información sobre la tarea más atrasada\n          if (totalOverdueTasks > 0) {\n            const overdueTasks = getAllOverdueTasks();\n            const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n            const oldestTask = sortedOverdueTasks[0];\n            const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n            \n            aiResponse += ` La tarea más atrasada es \"${oldestTask.title}\" asignada a ${getUserNameById(oldestTask.assigneeId)}, con ${daysOverdue} días de atraso. ¡Es importante revisar las tareas vencidas para evitar problemas!`;\n            \n            // Actualizar contexto\n            newContext.lastMentionedOldestTask = oldestTask;\n          }\n          \n          // Actualizar contexto\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          newContext.lastMentionedOverdueTasks = tasks.filter(t => \n            new Date(t.dueDate) < new Date() && \n            t.status !== 'completed'\n          );\n          \n          // Ordenar tareas vencidas por fecha\n          if (totalOverdueTasks > 0) {\n            const sortedOverdueTasks = [...newContext.lastMentionedOverdueTasks].sort(\n              (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n            );\n            newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          }\n          newContext.lastDiscussedTopic = \"pendientes_general\";\n        } else {\n          aiResponse = \"¡Excelente! No hay tareas pendientes en este momento. ¡Todo está al día!\";\n          newContext.lastMentionedTasks = [];\n          newContext.lastMentionedOverdueTasks = [];\n          newContext.lastMentionedSortedOverdueTasks = [];\n          newContext.lastMentionedOldestTask = null;\n        }\n      }\n    }\n    // --- Fin de respuestas flexibles para \"pendientes\" ---\n    \n    // Preguntas sobre tareas por cliente\n    else if (lowerQuery.includes(\"cliente\") && (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\"))) {\n      const clientNameMatch = lowerQuery.match(/cliente\\s+([\\w\\s]+)/);\n      if (clientNameMatch && clientNameMatch[1]) {\n        const requestedClientName = clientNameMatch[1].trim();\n        const client = clients.find(c => c.name.toLowerCase().includes(requestedClientName));\n        \n        if (client) {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          \n          if (clientTasks.length > 0) {\n            aiResponse = `El cliente \"${client.name}\" tiene un total de ${clientTasks.length} tareas, de las cuales ${pendingTasks.length} están pendientes`;\n            \n            if (overdueTasks.length > 0) {\n              aiResponse += ` y ${overdueTasks.length} están vencidas.`;\n              \n              // Información sobre la tarea vencida más antigua de este cliente\n              if (overdueTasks.length > 0) {\n                const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n                const oldestTask = sortedOverdueTasks[0];\n                const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n                const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n                \n                aiResponse += ` La tarea vencida más antigua es \"${oldestTask.title}\", asignada a ${getUserNameById(oldestTask.assigneeId)}, que venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n                \n                // Actualizar contexto\n                newContext.lastMentionedOldestTask = oldestTask;\n              }\n            } else {\n              aiResponse += `. ¡Buenas noticias! No hay tareas vencidas para este cliente.`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = pendingTasks;\n            newContext.lastMentionedOverdueTasks = overdueTasks;\n            if (overdueTasks.length > 0) {\n              newContext.lastMentionedSortedOverdueTasks = [...overdueTasks].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n            }\n            newContext.lastDiscussedTopic = \"tareas_cliente\";\n          } else {\n            aiResponse = `No se encontraron tareas para el cliente \"${client.name}\".`;\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = [];\n            newContext.lastMentionedOverdueTasks = [];\n            newContext.lastMentionedSortedOverdueTasks = [];\n            newContext.lastMentionedOldestTask = null;\n          }\n        } else {\n          aiResponse = `No encontré un cliente llamado \"${requestedClientName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de tareas por cliente\n        const clientSummaries = clients.map(client => {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          \n          if (clientTasks.length > 0) {\n            return `\"${client.name}\": ${pendingTasks.length} pendientes, ${overdueTasks.length} vencidas.`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        \n        if (clientSummaries) {\n          aiResponse = `Aquí tienes un resumen de tareas por cliente:\\n${clientSummaries}`;\n          \n          // Actualizar contexto - todas las tareas pendientes\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n        } else {\n          aiResponse = \"No hay tareas asignadas a ningún cliente en este momento.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n    \n    // Preguntas sobre tareas completadas (más directas)\n    else if (lowerQuery.includes(\"tareas completadas\") || lowerQuery.includes(\"cuántas completadas\")) {\n      const completedTasks = tasks.filter(t => t.status === 'completed');\n      const completedTasksCount = completedTasks.length;\n      \n      if (completedTasksCount > 0) {\n        // Ordenar por fecha de completado (más reciente primero)\n        const sortedCompletedTasks = [...completedTasks].sort((a, b) => new Date(b.completedAt || b.dueDate) - new Date(a.completedAt || a.dueDate));\n        const latestTask = sortedCompletedTasks[0];\n        const latestTaskCompletedDate = formatDate(latestTask.completedAt || latestTask.dueDate);\n        \n        aiResponse = `Se han completado ${completedTasksCount} tareas hasta ahora. La tarea completada más reciente es \"${latestTask.title}\" para el cliente ${getClientNameById(latestTask.clientId)}, completada el ${latestTaskCompletedDate}.`;\n        \n        // Agregar información sobre quién ha completado más tareas\n        const completionsByUser = {};\n        completedTasks.forEach(task => {\n          const userId = task.assigneeId;\n          completionsByUser[userId] = (completionsByUser[userId] || 0) + 1;\n        });\n        \n        let topPerformer = null;\n        let maxCompletions = 0;\n        \n        for (const userId in completionsByUser) {\n          if (completionsByUser[userId] > maxCompletions) {\n            maxCompletions = completionsByUser[userId];\n            topPerformer = userId;\n          }\n        }\n        \n        if (topPerformer) {\n          const topPerformerName = getUserNameById(parseInt(topPerformer));\n          aiResponse += ` ${topPerformerName} es quien más tareas ha completado, con un total de ${maxCompletions}.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedTasks = completedTasks;\n        newContext.lastDiscussedTopic = \"tareas_completadas\";\n      } else {\n        aiResponse = \"Aún no hay tareas completadas. ¡Manos a la obra, que el tiempo vuela!\";\n        newContext.lastMentionedTasks = [];\n      }\n    }\n    \n    // Preguntas sobre rendimiento de equipos\n    else if (lowerQuery.includes(\"rendimiento\") && lowerQuery.includes(\"equipo\")) {\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        \n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            const overdueRate = (report.overdueTasks / report.totalTasks * 100).toFixed(1);\n            \n            aiResponse = `El equipo \"${team.name}\" tiene una tasa de completado del ${completionRate}% (${report.completedTasks} de ${report.totalTasks} tareas). `;\n            \n            if (report.overdueTasks > 0) {\n              aiResponse += `Sin embargo, tienen un ${overdueRate}% de tareas vencidas (${report.overdueTasks} tareas). `;\n            } else {\n              aiResponse += `Y lo mejor es que no tienen tareas vencidas. `;\n            }\n            \n            // Información sobre el rendimiento de los miembros del equipo\n            if (Object.keys(report.memberPerformance).length > 0) {\n              const memberPerformance = Object.values(report.memberPerformance);\n              const bestPerformer = memberPerformance.reduce((best, current) => {\n                return (current.completedTasks > best.completedTasks) ? current : best;\n              }, { memberName: '', completedTasks: 0 });\n              \n              if (bestPerformer.completedTasks > 0) {\n                aiResponse += `${bestPerformer.memberName} es el miembro con mejor rendimiento, habiendo completado ${bestPerformer.completedTasks} tareas.`;\n              }\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => teamMemberIds.includes(t.assigneeId));\n            newContext.lastDiscussedTopic = \"rendimiento_equipo\";\n          } else {\n            aiResponse = `No se encontraron datos de rendimiento para el equipo \"${team.name}\".`;\n            newContext.lastMentionedTeam = team;\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de rendimiento por equipo\n        const teamPerformanceSummaries = teams.map(team => {\n          const report = teamTasksReport[team.id];\n          if (report && report.totalTasks > 0) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            return `\"${team.name}\": ${completionRate}% de tareas completadas (${report.completedTasks}/${report.totalTasks}).`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        \n        if (teamPerformanceSummaries) {\n          aiResponse = `Aquí tienes un resumen del rendimiento por equipo:\\n${teamPerformanceSummaries}`;\n          \n          // Actualizar contexto - todas las tareas\n          newContext.lastMentionedTasks = tasks;\n          newContext.lastDiscussedTopic = \"rendimiento_equipos\";\n        } else {\n          aiResponse = \"No hay datos de rendimiento disponibles para los equipos.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n    \n    // Saludos\n    else if (lowerQuery.includes(\"hola\") || lowerQuery.includes(\"qué tal\") || lowerQuery.includes(\"buenos días\") || lowerQuery.includes(\"buenas tardes\")) {\n      aiResponse = \"¡Hola! Soy tu asistente de informes. ¿En qué puedo ayudarte hoy con los datos de tus equipos y tareas? Pregúntame sobre pendientes, vencidas o el estado de algún equipo o integrante.\";\n    }\n    // Preguntas generales sobre la IA\n    else if (lowerQuery.includes(\"qué puedes hacer\") || lowerQuery.includes(\"cómo funcionas\") || lowerQuery.includes(\"ayuda\")) {\n      aiResponse = \"Puedo darte resúmenes sobre tareas pendientes (generales, por equipo o por integrante), tareas vencidas, y tareas completadas. También puedo decirte cuándo venció la tarea más antigua, el rendimiento de los equipos, y mucho más. Solo pregúntame algo como: '¿Cómo vamos con los pendientes?', 'Cuéntame sobre el equipo Impuestos', '¿Cuándo venció la tarea más antigua?' o '¿Qué tareas tiene Ana López?'\";\n    }\n\n    // Actualizar el contexto de la conversación\n    setConversationContext(newContext);\n\n    setTimeout(() => {\n      // Actualizar el historial con la respuesta\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        if (newHistory.length > 0) {\n          newHistory[newHistory.length - 1] = {\n            ...newHistory[newHistory.length - 1],\n            response: aiResponse\n          };\n        } else {\n          // Si por alguna razón no hay historial, agregar la consulta y respuesta\n          newHistory.push({ type: 'query', text: userQuery, response: aiResponse });\n        }\n        return newHistory;\n      });\n      \n      setResponse('');\n      setIsLoading(false);\n      \n      // Scroll al final del chat\n      if (chatContainerRef.current) {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      }\n    }, 1500); // Simula un tiempo de procesamiento de la IA\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (query.trim()) {\n      // Guardar la consulta en el historial\n      setChatHistory([...chatHistory, { type: 'query', text: query }]);\n      setResponse(''); // Limpiar respuesta anterior\n      generateAIResponse(query);\n      setQuery(''); // Limpiar input\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow rounded-lg p-6\">\n      <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Asistente de Informes con IA</h3>\n      <p className=\"text-sm text-gray-500 mb-6\">\n        Pregúntame sobre el estado de las tareas de tus equipos o integrantes. Por ejemplo:\n        \"¿Cómo vamos con los pendientes?\", \"¿Cuántas tareas pendientes tiene el equipo Impuestos?\", \n        \"¿Qué tareas tiene Ana López?\", \"¿Cuándo venció la tarea más antigua?\".\n      </p>\n\n      <div ref={chatContainerRef} className=\"border border-gray-200 rounded-md p-4 h-64 overflow-y-auto mb-4 bg-gray-50\">\n        {chatHistory.map((item, index) => (\n          <div key={index} className=\"mb-3\">\n            <div className=\"text-gray-800\">\n              <span className=\"font-semibold text-gray-600\">Tú: </span>{item.text}\n            </div>\n            {item.response && (\n              <div className=\"text-gray-800 whitespace-pre-line mt-2\">\n                <span className=\"font-semibold text-blue-600\">Asistente: </span>{item.response}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"flex items-center mt-2\">\n            <svg className=\"animate-spin h-5 w-5 text-blue-500 mr-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            <span className=\"text-gray-600\">Pensando...</span>\n          </div>\n        )}\n        \n        {!isLoading && chatHistory.length === 0 && (\n          <div className=\"text-gray-500 italic\">Esperando tu pregunta...</div>\n        )}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"flex\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Escribe tu pregunta aquí...\"\n          className=\"flex-1 px-4 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          disabled={isLoading}\n        />\n        <button\n          type=\"submit\"\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n          disabled={isLoading || !query.trim()}\n        >\n          Preguntar\n        </button>\n      </form>\n      \n      <div className=\"mt-4\">\n        <p className=\"text-xs text-gray-500\">Sugerencias de preguntas:</p>\n        <div className=\"mt-2 flex flex-wrap gap-2\">\n          <button \n            onClick={() => setQuery(\"¿Cómo vamos con los pendientes?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Cómo vamos con los pendientes?\n          </button>\n          <button \n            onClick={() => setQuery(\"¿Cuál es el pendiente más atrasado?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Cuál es el más atrasado?\n          </button>\n          <button \n            onClick={() => setQuery(\"¿Quién tiene el pendiente más atrasado?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Quién tiene el más atrasado?\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIReportAssistant;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}