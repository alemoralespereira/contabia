{"ast":null,"code":"import _objectSpread from\"C:/Contabia/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import Sidebar from'./Sidebar';import Header from'./Header';import KanbanBoard from'./KanbanBoard';import TeamManagement from'./TeamManagement';import ClientManagement from'./ClientManagement';import Reports from'./Reports';import UserProfile from'./UserProfile';import{tasks as initialTasks}from'../mock/tasks';import{users as initialUsers}from'../mock/users';// Renombrado para evitar conflicto\nimport{teams as initialTeams}from'../mock/users';// Renombrado para evitar conflicto\nimport{accounts}from'../mock/users';import{clients as initialClients}from'../mock/clients';// Renombrado para evitar conflicto\nimport{getUserTeamMembers}from'../utils/auth';import{getTasksByUser,updateTaskStatus}from'../utils/taskUtils';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=_ref=>{let{user,onLogout}=_ref;const[currentView,setCurrentView]=useState('kanban');const[currentTasks,setCurrentTasks]=useState(initialTasks);const[currentUsers,setCurrentUsers]=useState(initialUsers);const[currentTeams,setCurrentTeams]=useState(initialTeams);const[currentClients,setCurrentClients]=useState(initialClients);const[selectedTeamMember,setSelectedTeamMember]=useState(null);// Obtener miembros del equipo si el user es supervisor o admin\nconst teamMembers=getUserTeamMembers(user,Array.isArray(currentUsers)?currentUsers:[],Array.isArray(currentTeams)?currentTeams:[]);// Efecto para resetear la selección de miembro cuando la vista cambia a algo que no es kanban\nuseEffect(()=>{if(currentView!=='kanban'){setSelectedTeamMember(null);}},[currentView]);// Manejar cambio de estado de una tarea\nconst handleTaskStatusChange=(taskId,newStatus)=>{const updatedTasks=updateTaskStatus(currentTasks,taskId,newStatus);setCurrentTasks(updatedTasks);};// Manejar la selección de un miembro del equipo para ver sus tareas\nconst handleTeamMemberSelect=memberId=>{setSelectedTeamMember(memberId);setCurrentView('kanban');// Asegurarse de que la vista sea Kanban\n};// Funciones de administración para Clientes\nconst handleAddClient=newClient=>{setCurrentClients(prevClients=>[...prevClients,_objectSpread(_objectSpread({},newClient),{},{id:prevClients.length+1})]);};const handleEditClient=updatedClient=>{setCurrentClients(prevClients=>prevClients.map(client=>client.id===updatedClient.id?updatedClient:client));};// Funciones de administración para Equipos\nconst handleAddTeam=newTeam=>{setCurrentTeams(prevTeams=>[...prevTeams,_objectSpread(_objectSpread({},newTeam),{},{id:prevTeams.length+1})]);};const handleEditTeam=updatedTeam=>{setCurrentTeams(prevTeams=>prevTeams.map(team=>team.id===updatedTeam.id?updatedTeam:team));};const handleDeleteTeam=teamId=>{setCurrentTeams(prevTeams=>prevTeams.filter(team=>team.id!==teamId));setCurrentUsers(prevUsers=>prevUsers.map(user=>user.teamId===teamId?_objectSpread(_objectSpread({},user),{},{teamId:null}):user));};const handleAssignSupervisor=(teamId,supervisorId)=>{setCurrentTeams(prevTeams=>prevTeams.map(team=>team.id===teamId?_objectSpread(_objectSpread({},team),{},{supervisorId:supervisorId}):team));};// Funciones de administración para Miembros\nconst handleAddMember=newMember=>{// Generar un ID único para el nuevo miembro\nconst newId=Math.max(...currentUsers.map(u=>u.id))+1;const memberWithId=_objectSpread(_objectSpread({},newMember),{},{id:newId});setCurrentUsers(prevUsers=>[...prevUsers,memberWithId]);return memberWithId;// Devolver el miembro con su ID\n};const handleEditMember=updatedMember=>{setCurrentUsers(prevUsers=>prevUsers.map(member=>member.id===updatedMember.id?updatedMember:member));};const handleDeleteMember=memberId=>{setCurrentUsers(prevUsers=>prevUsers.filter(member=>member.id!==memberId));setCurrentTasks(prevTasks=>prevTasks.map(task=>task.assigneeId===memberId?_objectSpread(_objectSpread({},task),{},{assigneeId:null}):task));};const handleAddTeamMember=(memberId,teamId)=>{setCurrentUsers(prevUsers=>prevUsers.map(user=>user.id===memberId?_objectSpread(_objectSpread({},user),{},{teamId:teamId}):user));};const handleRemoveTeamMember=memberId=>{setCurrentUsers(prevUsers=>prevUsers.map(user=>user.id===memberId?_objectSpread(_objectSpread({},user),{},{teamId:null}):user));};// Determinar qué tareas mostrar en el tablero Kanban\nconst getKanbanTasks=()=>{// Aseguramos que currentTasks sea un array antes de filtrar\nconst tasksToFilter=Array.isArray(currentTasks)?currentTasks:[];// Si hay un miembro del equipo seleccionado, mostrar sus tareas\nif(selectedTeamMember){return getTasksByUser(tasksToFilter,selectedTeamMember);}// Si no hay miembro seleccionado, mostrar las tareas del user logueado\nreturn getTasksByUser(tasksToFilter,user.id);};// Renderizar la vista actual\nconst renderCurrentView=()=>{// Añadimos console.log para depurar el estado del user y la vista\nconsole.log(\"Dashboard: Rendering view:\",currentView,\"User:\",user,\"Selected Member:\",selectedTeamMember);console.log(\"Dashboard: currentTasks length:\",currentTasks.length);console.log(\"Dashboard: currentUsers length:\",currentUsers.length);console.log(\"Dashboard: currentClients length:\",currentClients.length);console.log(\"Dashboard: currentTeams length:\",currentTeams.length);switch(currentView){case'kanban':return/*#__PURE__*/_jsx(KanbanBoard,{tasks:getKanbanTasks(),onStatusChange:handleTaskStatusChange,clients:currentClients,users:currentUsers,selectedUser:selectedTeamMember?currentUsers.find(u=>u.id===selectedTeamMember):user,currentUser:user,onClearSelection:()=>setSelectedTeamMember(null)});case'teams':return/*#__PURE__*/_jsx(TeamManagement,{teams:currentTeams,users:currentUsers,currentUser:user,onSelectMember:handleTeamMemberSelect,onAddTeam:handleAddTeam,onEditTeam:handleEditTeam,onDeleteTeam:handleDeleteTeam,onAddMember:handleAddMember// Pasamos la función de agregar miembro\n,onEditMember:handleEditMember,onDeleteMember:handleDeleteMember,onAddTeamMember:handleAddTeamMember// Pasamos la función de asignar miembro a equipo\n,onRemoveTeamMember:handleRemoveTeamMember,onAssignSupervisor:handleAssignSupervisor});case'clients':return/*#__PURE__*/_jsx(ClientManagement,{clients:currentClients,currentUser:user,onAddClient:handleAddClient,onEditClient:handleEditClient});case'reports':return/*#__PURE__*/_jsx(Reports,{tasks:currentTasks,users:currentUsers,teams:currentTeams,clients:currentClients,currentUser:user});case'profile':return/*#__PURE__*/_jsx(UserProfile,{user:user});default:// Fallback seguro si currentView es un valor inesperado\nconsole.warn(\"Unexpected currentView:\",currentView,\"Defaulting to KanbanBoard.\");return/*#__PURE__*/_jsx(KanbanBoard,{tasks:getKanbanTasks(),onStatusChange:handleTaskStatusChange,clients:currentClients,users:currentUsers,selectedUser:user// Por defecto, mostrar las tareas del user logueado\n,currentUser:user,onClearSelection:()=>setSelectedTeamMember(null)});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex h-screen bg-gray-50\",children:[/*#__PURE__*/_jsx(Sidebar,{currentView:currentView,setCurrentView:setCurrentView,user:user}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 flex flex-col overflow-hidden\",children:[/*#__PURE__*/_jsx(Header,{user:user,onLogout:onLogout,teamMembers:teamMembers,selectedMember:selectedTeamMember,onSelectMember:handleTeamMemberSelect,onClearSelection:()=>setSelectedTeamMember(null)}),/*#__PURE__*/_jsx(\"main\",{className:\"flex-1 overflow-y-auto bg-gray-50 p-4\",children:renderCurrentView()})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Header","KanbanBoard","TeamManagement","ClientManagement","Reports","UserProfile","tasks","initialTasks","users","initialUsers","teams","initialTeams","accounts","clients","initialClients","getUserTeamMembers","getTasksByUser","updateTaskStatus","jsx","_jsx","jsxs","_jsxs","Dashboard","_ref","user","onLogout","currentView","setCurrentView","currentTasks","setCurrentTasks","currentUsers","setCurrentUsers","currentTeams","setCurrentTeams","currentClients","setCurrentClients","selectedTeamMember","setSelectedTeamMember","teamMembers","Array","isArray","handleTaskStatusChange","taskId","newStatus","updatedTasks","handleTeamMemberSelect","memberId","handleAddClient","newClient","prevClients","_objectSpread","id","length","handleEditClient","updatedClient","map","client","handleAddTeam","newTeam","prevTeams","handleEditTeam","updatedTeam","team","handleDeleteTeam","teamId","filter","prevUsers","handleAssignSupervisor","supervisorId","handleAddMember","newMember","newId","Math","max","u","memberWithId","handleEditMember","updatedMember","member","handleDeleteMember","prevTasks","task","assigneeId","handleAddTeamMember","handleRemoveTeamMember","getKanbanTasks","tasksToFilter","renderCurrentView","console","log","onStatusChange","selectedUser","find","currentUser","onClearSelection","onSelectMember","onAddTeam","onEditTeam","onDeleteTeam","onAddMember","onEditMember","onDeleteMember","onAddTeamMember","onRemoveTeamMember","onAssignSupervisor","onAddClient","onEditClient","warn","className","children","selectedMember"],"sources":["C:/Contabia/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport KanbanBoard from './KanbanBoard';\nimport TeamManagement from './TeamManagement';\nimport ClientManagement from './ClientManagement';\nimport Reports from './Reports';\nimport UserProfile from './UserProfile';\nimport { tasks as initialTasks } from '../mock/tasks';\nimport { users as initialUsers } from '../mock/users'; // Renombrado para evitar conflicto\nimport { teams as initialTeams } from '../mock/users'; // Renombrado para evitar conflicto\nimport { accounts } from '../mock/users';\nimport { clients as initialClients } from '../mock/clients'; // Renombrado para evitar conflicto\nimport { getUserTeamMembers } from '../utils/auth';\nimport { getTasksByUser, updateTaskStatus } from '../utils/taskUtils';\n\nconst Dashboard = ({ user, onLogout }) => {\n  const [currentView, setCurrentView] = useState('kanban');\n  const [currentTasks, setCurrentTasks] = useState(initialTasks);\n  const [currentUsers, setCurrentUsers] = useState(initialUsers);\n  const [currentTeams, setCurrentTeams] = useState(initialTeams);\n  const [currentClients, setCurrentClients] = useState(initialClients);\n  const [selectedTeamMember, setSelectedTeamMember] = useState(null);\n  \n  // Obtener miembros del equipo si el user es supervisor o admin\n  const teamMembers = getUserTeamMembers(user, Array.isArray(currentUsers) ? currentUsers : [], Array.isArray(currentTeams) ? currentTeams : []);\n  \n  // Efecto para resetear la selección de miembro cuando la vista cambia a algo que no es kanban\n  useEffect(() => {\n    if (currentView !== 'kanban') {\n      setSelectedTeamMember(null);\n    }\n  }, [currentView]);\n\n  // Manejar cambio de estado de una tarea\n  const handleTaskStatusChange = (taskId, newStatus) => {\n    const updatedTasks = updateTaskStatus(currentTasks, taskId, newStatus);\n    setCurrentTasks(updatedTasks);\n  };\n  \n  // Manejar la selección de un miembro del equipo para ver sus tareas\n  const handleTeamMemberSelect = (memberId) => {\n    setSelectedTeamMember(memberId);\n    setCurrentView('kanban'); // Asegurarse de que la vista sea Kanban\n  };\n\n  // Funciones de administración para Clientes\n  const handleAddClient = (newClient) => {\n    setCurrentClients(prevClients => [...prevClients, { ...newClient, id: prevClients.length + 1 }]);\n  };\n\n  const handleEditClient = (updatedClient) => {\n    setCurrentClients(prevClients => prevClients.map(client => \n      client.id === updatedClient.id ? updatedClient : client\n    ));\n  };\n\n  // Funciones de administración para Equipos\n  const handleAddTeam = (newTeam) => {\n    setCurrentTeams(prevTeams => [...prevTeams, { ...newTeam, id: prevTeams.length + 1 }]);\n  };\n\n  const handleEditTeam = (updatedTeam) => {\n    setCurrentTeams(prevTeams => prevTeams.map(team => \n      team.id === updatedTeam.id ? updatedTeam : team\n    ));\n  };\n\n  const handleDeleteTeam = (teamId) => {\n    setCurrentTeams(prevTeams => prevTeams.filter(team => team.id !== teamId));\n    setCurrentUsers(prevUsers => prevUsers.map(user => \n      user.teamId === teamId ? { ...user, teamId: null } : user\n    ));\n  };\n\n  const handleAssignSupervisor = (teamId, supervisorId) => {\n    setCurrentTeams(prevTeams => prevTeams.map(team => \n      team.id === teamId ? { ...team, supervisorId: supervisorId } : team\n    ));\n  };\n\n  // Funciones de administración para Miembros\n  const handleAddMember = (newMember) => {\n    // Generar un ID único para el nuevo miembro\n    const newId = Math.max(...currentUsers.map(u => u.id)) + 1;\n    const memberWithId = { ...newMember, id: newId };\n    setCurrentUsers(prevUsers => [...prevUsers, memberWithId]);\n    return memberWithId; // Devolver el miembro con su ID\n  };\n\n  const handleEditMember = (updatedMember) => {\n    setCurrentUsers(prevUsers => prevUsers.map(member => \n      member.id === updatedMember.id ? updatedMember : member\n    ));\n  };\n\n  const handleDeleteMember = (memberId) => {\n    setCurrentUsers(prevUsers => prevUsers.filter(member => member.id !== memberId));\n    setCurrentTasks(prevTasks => prevTasks.map(task => \n      task.assigneeId === memberId ? { ...task, assigneeId: null } : task\n    ));\n  };\n\n  const handleAddTeamMember = (memberId, teamId) => {\n    setCurrentUsers(prevUsers => prevUsers.map(user => \n      user.id === memberId ? { ...user, teamId: teamId } : user\n    ));\n  };\n\n  const handleRemoveTeamMember = (memberId) => {\n    setCurrentUsers(prevUsers => prevUsers.map(user => \n      user.id === memberId ? { ...user, teamId: null } : user\n    ));\n  };\n  \n  // Determinar qué tareas mostrar en el tablero Kanban\n  const getKanbanTasks = () => {\n    // Aseguramos que currentTasks sea un array antes de filtrar\n    const tasksToFilter = Array.isArray(currentTasks) ? currentTasks : [];\n\n    // Si hay un miembro del equipo seleccionado, mostrar sus tareas\n    if (selectedTeamMember) {\n      return getTasksByUser(tasksToFilter, selectedTeamMember);\n    }\n    // Si no hay miembro seleccionado, mostrar las tareas del user logueado\n    return getTasksByUser(tasksToFilter, user.id);\n  };\n  \n  // Renderizar la vista actual\n  const renderCurrentView = () => {\n    // Añadimos console.log para depurar el estado del user y la vista\n    console.log(\"Dashboard: Rendering view:\", currentView, \"User:\", user, \"Selected Member:\", selectedTeamMember);\n    console.log(\"Dashboard: currentTasks length:\", currentTasks.length);\n    console.log(\"Dashboard: currentUsers length:\", currentUsers.length);\n    console.log(\"Dashboard: currentClients length:\", currentClients.length);\n    console.log(\"Dashboard: currentTeams length:\", currentTeams.length);\n\n\n    switch (currentView) {\n      case 'kanban':\n        return (\n          <KanbanBoard \n            tasks={getKanbanTasks()} \n            onStatusChange={handleTaskStatusChange}\n            clients={currentClients} \n            users={currentUsers}       \n            selectedUser={selectedTeamMember ? currentUsers.find(u => u.id === selectedTeamMember) : user}\n            currentUser={user}\n            onClearSelection={() => setSelectedTeamMember(null)}\n          />\n        );\n      case 'teams':\n        return (\n          <TeamManagement \n            teams={currentTeams} \n            users={currentUsers} \n            currentUser={user}\n            onSelectMember={handleTeamMemberSelect}\n            onAddTeam={handleAddTeam}\n            onEditTeam={handleEditTeam}\n            onDeleteTeam={handleDeleteTeam}\n            onAddMember={handleAddMember} // Pasamos la función de agregar miembro\n            onEditMember={handleEditMember}\n            onDeleteMember={handleDeleteMember}\n            onAddTeamMember={handleAddTeamMember} // Pasamos la función de asignar miembro a equipo\n            onRemoveTeamMember={handleRemoveTeamMember}\n            onAssignSupervisor={handleAssignSupervisor}\n          />\n        );\n      case 'clients':\n        return (\n          <ClientManagement \n            clients={currentClients} \n            currentUser={user} \n            onAddClient={handleAddClient}\n            onEditClient={handleEditClient}\n          />\n        );\n      case 'reports':\n        return (\n          <Reports \n            tasks={currentTasks} \n            users={currentUsers} \n            teams={currentTeams} \n            clients={currentClients}\n            currentUser={user}\n          />\n        );\n      case 'profile':\n        return <UserProfile user={user} />;\n      default:\n        // Fallback seguro si currentView es un valor inesperado\n        console.warn(\"Unexpected currentView:\", currentView, \"Defaulting to KanbanBoard.\");\n        return (\n          <KanbanBoard \n            tasks={getKanbanTasks()} \n            onStatusChange={handleTaskStatusChange}\n            clients={currentClients}\n            users={currentUsers}\n            selectedUser={user} // Por defecto, mostrar las tareas del user logueado\n            currentUser={user}\n            onClearSelection={() => setSelectedTeamMember(null)}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar \n        currentView={currentView} \n        setCurrentView={setCurrentView}\n        user={user}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          user={user} \n          onLogout={onLogout}\n          teamMembers={teamMembers}\n          selectedMember={selectedTeamMember}\n          onSelectMember={handleTeamMemberSelect}\n          onClearSelection={() => setSelectedTeamMember(null)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4\">\n          {renderCurrentView()}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}