{"ast":null,"code":"// Funciones para generar informes\n\nexport const generateTasksByUserReport = (tasks, users, clients) => {\n  const userTasks = {};\n  users.forEach(user => {\n    const userTaskList = tasks.filter(task => task.assigneeId === user.id);\n    if (userTaskList.length > 0) {\n      userTasks[user.id] = {\n        userName: user.name,\n        totalTasks: userTaskList.length,\n        completedTasks: userTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: userTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: userTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: userTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: userTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: userTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        tasksByClient: userTaskList.reduce((acc, task) => {\n          const client = clients.find(c => c.id === task.clientId);\n          if (client) {\n            if (!acc[client.id]) {\n              acc[client.id] = {\n                clientName: client.name,\n                count: 0\n              };\n            }\n            acc[client.id].count++;\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  return userTasks;\n};\nexport const generateTasksByTeamReport = (tasks, teams, users) => {\n  const teamTasks = {};\n  teams.forEach(team => {\n    const teamMembers = users.filter(user => user.teamId === team.id).map(user => user.id);\n    const teamTaskList = tasks.filter(task => teamMembers.includes(task.assigneeId));\n    if (teamTaskList.length > 0) {\n      teamTasks[team.id] = {\n        teamName: team.name,\n        totalTasks: teamTaskList.length,\n        completedTasks: teamTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: teamTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: teamTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: teamTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: teamTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: teamTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        memberPerformance: teamMembers.reduce((acc, memberId) => {\n          const member = users.find(u => u.id === memberId);\n          const memberTasks = teamTaskList.filter(task => task.assigneeId === memberId);\n          if (member && memberTasks.length > 0) {\n            acc[memberId] = {\n              memberName: member.name,\n              totalTasks: memberTasks.length,\n              completedTasks: memberTasks.filter(task => task.status === \"completed\").length\n            };\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  return teamTasks;\n};\nexport const generateClientTasksReport = (tasks, clients) => {\n  const clientTasks = {};\n  clients.forEach(client => {\n    const clientTaskList = tasks.filter(task => task.clientId === client.id);\n    if (clientTaskList.length > 0) {\n      clientTasks[client.id] = {\n        clientName: client.name,\n        totalTasks: clientTaskList.length,\n        completedTasks: clientTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: clientTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: clientTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: clientTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: clientTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: clientTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length\n      };\n    }\n  });\n  return clientTasks;\n};","map":{"version":3,"names":["generateTasksByUserReport","tasks","users","clients","userTasks","forEach","user","userTaskList","filter","task","assigneeId","id","length","userName","name","totalTasks","completedTasks","status","pendingTasks","inProgressTasks","reviewTasks","highPriorityTasks","priority","overdueTasks","dueDate","Date","today","tasksByClient","reduce","acc","client","find","c","clientId","clientName","count","generateTasksByTeamReport","teams","teamTasks","team","teamMembers","teamId","map","teamTaskList","includes","teamName","memberPerformance","memberId","member","u","memberTasks","memberName","generateClientTasksReport","clientTasks","clientTaskList"],"sources":["C:/Contabia/frontend/src/utils/reportUtils.js"],"sourcesContent":["// Funciones para generar informes\n\nexport const generateTasksByUserReport = (tasks, users, clients) => {\n  const userTasks = {};\n  \n  users.forEach(user => {\n    const userTaskList = tasks.filter(task => task.assigneeId === user.id);\n    \n    if (userTaskList.length > 0) {\n      userTasks[user.id] = {\n        userName: user.name,\n        totalTasks: userTaskList.length,\n        completedTasks: userTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: userTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: userTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: userTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: userTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: userTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        tasksByClient: userTaskList.reduce((acc, task) => {\n          const client = clients.find(c => c.id === task.clientId);\n          if (client) {\n            if (!acc[client.id]) {\n              acc[client.id] = {\n                clientName: client.name,\n                count: 0\n              };\n            }\n            acc[client.id].count++;\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  \n  return userTasks;\n};\n\nexport const generateTasksByTeamReport = (tasks, teams, users) => {\n  const teamTasks = {};\n  \n  teams.forEach(team => {\n    const teamMembers = users.filter(user => user.teamId === team.id).map(user => user.id);\n    const teamTaskList = tasks.filter(task => teamMembers.includes(task.assigneeId));\n    \n    if (teamTaskList.length > 0) {\n      teamTasks[team.id] = {\n        teamName: team.name,\n        totalTasks: teamTaskList.length,\n        completedTasks: teamTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: teamTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: teamTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: teamTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: teamTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: teamTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length,\n        memberPerformance: teamMembers.reduce((acc, memberId) => {\n          const member = users.find(u => u.id === memberId);\n          const memberTasks = teamTaskList.filter(task => task.assigneeId === memberId);\n          \n          if (member && memberTasks.length > 0) {\n            acc[memberId] = {\n              memberName: member.name,\n              totalTasks: memberTasks.length,\n              completedTasks: memberTasks.filter(task => task.status === \"completed\").length\n            };\n          }\n          return acc;\n        }, {})\n      };\n    }\n  });\n  \n  return teamTasks;\n};\n\nexport const generateClientTasksReport = (tasks, clients) => {\n  const clientTasks = {};\n  \n  clients.forEach(client => {\n    const clientTaskList = tasks.filter(task => task.clientId === client.id);\n    \n    if (clientTaskList.length > 0) {\n      clientTasks[client.id] = {\n        clientName: client.name,\n        totalTasks: clientTaskList.length,\n        completedTasks: clientTaskList.filter(task => task.status === \"completed\").length,\n        pendingTasks: clientTaskList.filter(task => task.status === \"pending\").length,\n        inProgressTasks: clientTaskList.filter(task => task.status === \"in_progress\").length,\n        reviewTasks: clientTaskList.filter(task => task.status === \"review\").length,\n        highPriorityTasks: clientTaskList.filter(task => task.priority === \"high\").length,\n        overdueTasks: clientTaskList.filter(task => {\n          const dueDate = new Date(task.dueDate);\n          const today = new Date();\n          return dueDate < today && task.status !== \"completed\";\n        }).length\n      };\n    }\n  });\n  \n  return clientTasks;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}