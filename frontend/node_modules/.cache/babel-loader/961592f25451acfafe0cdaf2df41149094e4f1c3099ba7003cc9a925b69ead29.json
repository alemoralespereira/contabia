{"ast":null,"code":"var _jsxFileName = \"C:\\\\Contabia\\\\frontend\\\\src\\\\components\\\\AIReportAssistant.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIReportAssistant = ({\n  tasks,\n  users,\n  teams,\n  clients,\n  currentUser,\n  userTasksReport,\n  teamTasksReport,\n  clientTasksReport\n}) => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [response, setResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [conversationContext, setConversationContext] = useState({\n    lastMentionedTasks: null,\n    // Últimas tareas mencionadas en detalle\n    lastMentionedUser: null,\n    lastMentionedTeam: null,\n    lastMentionedClient: null,\n    lastMentionedOverdueTasks: null,\n    // Todas las tareas vencidas mencionadas\n    lastMentionedHighPriorityTasks: null,\n    lastMentionedSortedOverdueTasks: null,\n    // Tareas vencidas ordenadas por antigüedad\n    lastMentionedOldestTask: null,\n    lastDiscussedTopic: null // Tema general de la última interacción\n  });\n  const chatContainerRef = useRef(null);\n\n  // Helper para obtener el nombre de un usuario por ID\n  const getUserNameById = id => {\n    var _users$find;\n    return ((_users$find = users.find(u => u.id === id)) === null || _users$find === void 0 ? void 0 : _users$find.name) || 'Desconocido';\n  };\n  // Helper para obtener el nombre de un equipo por ID\n  const getTeamNameById = id => {\n    var _teams$find;\n    return ((_teams$find = teams.find(t => t.id === id)) === null || _teams$find === void 0 ? void 0 : _teams$find.name) || 'Desconocido';\n  };\n  // Helper para obtener el nombre de un cliente por ID\n  const getClientNameById = id => {\n    var _clients$find;\n    return ((_clients$find = clients.find(c => c.id === id)) === null || _clients$find === void 0 ? void 0 : _clients$find.name) || 'Desconocido';\n  };\n\n  // Helper para formatear fechas\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString('es-ES', options);\n  };\n\n  // Helper para calcular días de retraso\n  const getDaysOverdue = dueDate => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = Math.abs(today - due);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  // Obtener todas las tareas vencidas\n  const getAllOverdueTasks = () => {\n    return tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n  };\n\n  // Obtener la tarea vencida más antigua\n  const getOldestOverdueTask = () => {\n    const overdueTasks = getAllOverdueTasks();\n    if (overdueTasks.length === 0) return null;\n    return overdueTasks.reduce((oldest, current) => {\n      return new Date(current.dueDate) < new Date(oldest.dueDate) ? current : oldest;\n    }, overdueTasks[0]);\n  };\n\n  // Simulación de la IA\n  const generateAIResponse = userQuery => {\n    setIsLoading(true);\n    let aiResponse = \"Lo siento, no pude encontrar información relevante para tu consulta. Intenta preguntar de otra manera.\";\n    let newContext = {\n      ...conversationContext\n    };\n    const lowerQuery = userQuery.toLowerCase().trim();\n\n    // --- Manejo de preguntas de seguimiento sobre tareas específicas ---\n    if ((lowerQuery.includes(\"a quién\") || lowerQuery.includes(\"a quien\")) && (lowerQuery.includes(\"están asignadas\") || lowerQuery.includes(\"está asignada\")) && (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\"))) {\n      if (newContext.lastMentionedTasks && newContext.lastMentionedTasks.length > 0) {\n        aiResponse = `Las tareas que mencionaste están asignadas a:\\n`;\n        newContext.lastMentionedTasks.forEach((task, index) => {\n          aiResponse += `${index + 1}. \"${task.title}\" está asignada a ${getUserNameById(task.assigneeId)}.\\n`;\n        });\n      } else {\n        aiResponse = \"Lo siento, no tengo un contexto claro de a qué tareas te refieres. ¿Podrías especificar?\";\n      }\n    }\n    // Preguntas sobre las N tareas con mayor atraso\n    else if ((lowerQuery.includes(\"dime\") || lowerQuery.includes(\"muéstrame\")) && (lowerQuery.includes(\"las\") || lowerQuery.includes(\"los\")) && (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\")) && (lowerQuery.includes(\"mayor atraso\") || lowerQuery.includes(\"más atraso\") || lowerQuery.includes(\"más antiguas\")) && lowerQuery.match(/\\d+/) // Busca un número en la consulta\n    ) {\n      const numMatch = lowerQuery.match(/\\d+/);\n      const numTasks = parseInt(numMatch[0]);\n      const overdueTasks = getAllOverdueTasks();\n      if (overdueTasks.length > 0) {\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const topTasks = sortedOverdueTasks.slice(0, numTasks);\n        if (topTasks.length > 0) {\n          aiResponse = `Aquí tienes las ${topTasks.length} tareas con mayor atraso:\\n`;\n          topTasks.forEach((task, index) => {\n            const daysOverdue = getDaysOverdue(task.dueDate);\n            const priorityText = task.priority === 'high' ? '(alta prioridad)' : task.priority === 'medium' ? '(prioridad media)' : '(baja prioridad)';\n            aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n          });\n\n          // Actualizar contexto para futuras preguntas de seguimiento\n          newContext.lastMentionedTasks = topTasks;\n          newContext.lastMentionedOverdueTasks = topTasks;\n          newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          newContext.lastDiscussedTopic = \"top_n_tareas_atrasadas\";\n        } else {\n          aiResponse = `No hay ${numTasks} tareas vencidas para mostrar. Solo hay ${overdueTasks.length} tareas vencidas en total.`;\n        }\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n      }\n    }\n    // Preguntas sobre quién tiene el pendiente más atrasado\n    else if ((lowerQuery.includes(\"quién\") || lowerQuery.includes(\"quien\")) && (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\"))) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n\n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        aiResponse = `${assigneeName} tiene la tarea más atrasada. Se trata de \"${oldestTask.title}\" para el cliente ${clientName}, que venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n\n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n\n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"persona_con_tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Preguntas sobre cuál es el pendiente más atrasado\n    else if ((lowerQuery.includes(\"cuál\") || lowerQuery.includes(\"cual\")) && (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\")) || lowerQuery.includes(\"más\") && lowerQuery.includes(\"atrasado\")) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n\n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        aiResponse = `La tarea más atrasada es \"${oldestTask.title}\" para el cliente ${clientName}, asignada a ${assigneeName}. Venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n\n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n\n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Preguntas sobre tareas más antiguas respecto a su vencimiento\n    else if (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"antiguas\") && lowerQuery.includes(\"vencimiento\") || lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"vencidas\") && lowerQuery.includes(\"antiguas\") || lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"mayor\") && lowerQuery.includes(\"atraso\")) {\n      const overdueTasks = getAllOverdueTasks();\n      if (overdueTasks.length > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        aiResponse = `Las tareas vencidas ordenadas por antigüedad son:\\n`;\n        sortedOverdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : task.priority === 'medium' ? '(prioridad media)' : '(baja prioridad)';\n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n\n        // Actualizar contexto\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n        newContext.lastDiscussedTopic = \"tareas_ordenadas_por_antiguedad\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Manejo de preguntas de seguimiento basadas en contexto\n    else if ((lowerQuery.includes(\"cuáles\") || lowerQuery.includes(\"cuales\") || lowerQuery.includes(\"qué\") || lowerQuery.includes(\"que\")) && (lowerQuery.includes(\"son\") || lowerQuery.includes(\"es\")) && (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\") || lowerQuery.includes(\"esas tareas\") || lowerQuery.includes(\"estas tareas\"))) {\n      // El usuario está preguntando por tareas mencionadas anteriormente\n      if (newContext.lastMentionedHighPriorityTasks && newContext.lastMentionedHighPriorityTasks.length > 0) {\n        const highPriorityTasks = newContext.lastMentionedHighPriorityTasks;\n        aiResponse = `Las tareas de alta prioridad que mencioné son:\\n`;\n        highPriorityTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días.\\n`;\n        });\n        newContext.lastDiscussedTopic = \"tareas_alta_prioridad\";\n      } else if (newContext.lastMentionedOverdueTasks && newContext.lastMentionedOverdueTasks.length > 0) {\n        const overdueTasks = newContext.lastMentionedOverdueTasks;\n        aiResponse = `Las tareas vencidas que mencioné son:\\n`;\n        overdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : task.priority === 'medium' ? '(prioridad media)' : '(baja prioridad)';\n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      } else {\n        aiResponse = \"Lo siento, no he mencionado tareas específicas en nuestra conversación anterior. ¿Te gustaría que te muestre las tareas vencidas o pendientes?\";\n      }\n    }\n    // Preguntas sobre la tarea vencida más antigua\n    else if (lowerQuery.includes(\"tarea vencida más antigua\") || lowerQuery.includes(\"vencimiento más antiguo\") || lowerQuery.includes(\"vencida hace más tiempo\") || lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"vencida\") && lowerQuery.includes(\"más tiempo\") || lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"está vencida\") && lowerQuery.includes(\"más tiempo\")) {\n      const oldestTask = getOldestOverdueTask();\n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        aiResponse = `La tarea vencida hace más tiempo es \"${oldestTask.title}\" para el cliente ${clientName}. Está asignada a ${assigneeName} y venció el ${oldestTaskDueDate}, hace ${daysOverdue} días. `;\n\n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Esta tarea es de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Esta tarea es de prioridad media.`;\n        } else {\n          aiResponse += `Esta tarea es de baja prioridad, pero aún así está vencida.`;\n        }\n\n        // Actualizar contexto\n        newContext.lastMentionedTasks = [oldestTask];\n        newContext.lastMentionedOldestTask = oldestTask;\n\n        // También guardar todas las tareas vencidas ordenadas\n        const overdueTasks = getAllOverdueTasks();\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastDiscussedTopic = \"tarea_mas_antigua\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Pendientes por nombre específico (sin necesidad de la palabra \"integrante\" o \"colaborador\")\n    else if (lowerQuery.match(/pendientes\\s+de\\s+([\\w\\s]+)/) || lowerQuery.match(/tareas\\s+de\\s+([\\w\\s]+)/)) {\n      const nameMatch = lowerQuery.match(/(?:pendientes|tareas)\\s+de\\s+([\\w\\s]+)/);\n      if (nameMatch && nameMatch[1]) {\n        const requestedName = nameMatch[1].trim();\n        const user = users.find(u => u.name.toLowerCase().includes(requestedName.toLowerCase()));\n        if (user) {\n          const userTasks = tasks.filter(t => t.assigneeId === user.id && t.status !== 'completed');\n          if (userTasks.length > 0) {\n            const pendingCount = userTasks.filter(t => t.status === 'pending').length;\n            const inProgressCount = userTasks.filter(t => t.status === 'in_progress').length;\n            const reviewCount = userTasks.filter(t => t.status === 'review').length;\n            const overdueCount = userTasks.filter(t => new Date(t.dueDate) < new Date()).length;\n            aiResponse = `${user.name} tiene ${userTasks.length} tareas pendientes en total. De estas, ${pendingCount} están en estado pendiente, ${inProgressCount} en progreso y ${reviewCount} en revisión.`;\n            if (overdueCount > 0) {\n              aiResponse += ` ¡Atención! ${overdueCount} de estas tareas están vencidas.`;\n\n              // Detallar las tareas vencidas\n              const overdueTasks = userTasks.filter(t => new Date(t.dueDate) < new Date());\n              const overdueDetails = overdueTasks.map(task => {\n                const daysOverdue = getDaysOverdue(task.dueDate);\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vencida hace ${daysOverdue} días)`;\n              }).join(', ');\n              aiResponse += ` Las tareas vencidas son: ${overdueDetails}.`;\n            }\n\n            // Listar las próximas tareas a vencer\n            const upcomingTasks = userTasks.filter(t => new Date(t.dueDate) >= new Date()).sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)).slice(0, 3);\n            if (upcomingTasks.length > 0) {\n              const upcomingDetails = upcomingTasks.map(task => {\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vence el ${formatDate(task.dueDate)})`;\n              }).join(', ');\n              aiResponse += ` Las próximas tareas a vencer son: ${upcomingDetails}.`;\n            }\n\n            // Actualizar contexto\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = userTasks;\n\n            // Si hay tareas vencidas, guardar la más antigua\n            if (overdueCount > 0) {\n              const sortedOverdueTasks = [...userTasks.filter(t => new Date(t.dueDate) < new Date())].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_usuario\";\n          } else {\n            aiResponse = `¡Buenas noticias! ${user.name} no tiene tareas pendientes en este momento.`;\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré a ningún integrante llamado \"${requestedName}\". ¿Podrías verificar el nombre?`;\n        }\n      }\n    }\n\n    // Preguntas sobre tareas vencidas (más directas)\n    else if (lowerQuery.includes(\"tareas vencidas\") || lowerQuery.includes(\"cuántas vencidas\")) {\n      const overdueTasks = getAllOverdueTasks();\n      const overdueTasksCount = overdueTasks.length;\n      if (overdueTasksCount > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const oldestTask = sortedOverdueTasks[0];\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n\n        // Filtrar tareas de alta prioridad\n        const highPriorityTasks = sortedOverdueTasks.filter(t => t.priority === 'high');\n        const highPriorityCount = highPriorityTasks.length;\n        aiResponse = `Actualmente hay ${overdueTasksCount} tareas vencidas en el sistema. La tarea vencida más antigua es \"${oldestTask.title}\" para el cliente ${getClientNameById(oldestTask.clientId)}, asignada a ${getUserNameById(oldestTask.assigneeId)}. Esta tarea venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n        if (overdueTasksCount > 1 && highPriorityCount > 0) {\n          aiResponse += ` De las tareas vencidas, ${highPriorityCount} son de alta prioridad y requieren atención inmediata.`;\n        }\n\n        // Actualizar contexto\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedHighPriorityTasks = highPriorityTasks;\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      } else {\n        aiResponse = \"¡Excelente! No hay tareas vencidas en este momento. ¡Vamos por buen camino!\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedHighPriorityTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // --- Respuestas más flexibles para \"pendientes\" ---\n    else if (lowerQuery.includes(\"pendientes\") || lowerQuery.includes(\"situación actual\") || lowerQuery.includes(\"cómo vamos\")) {\n      // Pendientes por equipo específico\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n            aiResponse = `El equipo \"${team.name}\" tiene un total de ${totalPending} tareas pendientes. Específicamente, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n            if (report.overdueTasks > 0) {\n              aiResponse += ` ¡Ojo! También tienen ${report.overdueTasks} tareas vencidas.`;\n            } else {\n              aiResponse += ` ¡Y lo mejor es que no tienen tareas vencidas!`;\n            }\n\n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => teamMemberIds.includes(t.assigneeId) && t.status !== 'completed');\n\n            // Si hay tareas vencidas, guardar la más antigua\n            if (report.overdueTasks > 0) {\n              const teamOverdueTasks = tasks.filter(t => teamMemberIds.includes(t.assigneeId) && t.status !== 'completed' && new Date(t.dueDate) < new Date());\n              const sortedOverdueTasks = [...teamOverdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_equipo\";\n          } else {\n            aiResponse = `No se encontraron tareas para el equipo \"${team.name}\". Parece que están al día o no tienen asignaciones.`;\n            newContext.lastMentionedTeam = team;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre o intentar con otro?`;\n        }\n      }\n      // Pendientes por integrante específico\n      else if (lowerQuery.includes(\"integrante\") || lowerQuery.includes(\"colaborador\") || lowerQuery.includes(\"usuario\")) {\n        const userNameMatch = lowerQuery.match(/(?:integrante|colaborador|usuario)\\s+([\\w\\s]+)/);\n        if (userNameMatch && userNameMatch[1]) {\n          const requestedUserName = userNameMatch[1].trim();\n          const user = users.find(u => u.name.toLowerCase().includes(requestedUserName));\n          if (user) {\n            const report = userTasksReport[user.id];\n            if (report) {\n              const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n              aiResponse = `\"${user.name}\" tiene un total de ${totalPending} tareas pendientes. De estas, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n              if (report.overdueTasks > 0) {\n                aiResponse += ` ¡Cuidado! Tiene ${report.overdueTasks} tareas vencidas.`;\n              } else {\n                aiResponse += ` ¡Va muy bien, no tiene tareas vencidas!`;\n              }\n\n              // Actualizar contexto\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = tasks.filter(t => t.assigneeId === user.id && t.status !== 'completed');\n\n              // Si hay tareas vencidas, guardar la más antigua\n              if (report.overdueTasks > 0) {\n                const userOverdueTasks = tasks.filter(t => t.assigneeId === user.id && t.status !== 'completed' && new Date(t.dueDate) < new Date());\n                const sortedOverdueTasks = [...userOverdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n                newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n                newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n              }\n              newContext.lastDiscussedTopic = \"pendientes_usuario\";\n            } else {\n              aiResponse = `No se encontraron tareas para \"${user.name}\". Parece que está al día o no tiene asignaciones.`;\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = [];\n            }\n          } else {\n            aiResponse = `No encontré un integrante llamado \"${requestedUserName}\". ¿Podrías verificar el nombre?`;\n          }\n        } else {\n          // Resumen general de pendientes por integrante\n          const userSummaries = users.map(user => {\n            const report = userTasksReport[user.id];\n            if (report && (report.pendingTasks + report.inProgressTasks + report.reviewTasks > 0 || report.overdueTasks > 0)) {\n              return `\"${user.name}\" tiene ${report.pendingTasks + report.inProgressTasks + report.reviewTasks} pendientes (${report.overdueTasks} vencidas).`;\n            }\n            return null;\n          }).filter(Boolean).join('\\n');\n          if (userSummaries) {\n            aiResponse = `Aquí tienes un resumen de los pendientes por integrante:\\n${userSummaries}`;\n\n            // Actualizar contexto - todas las tareas pendientes\n            newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          } else {\n            aiResponse = \"¡Felicidades! Parece que todos los integrantes están al día con sus tareas pendientes.\";\n            newContext.lastMentionedTasks = [];\n          }\n        }\n      } else {\n        // Resumen general de pendientes (todos los equipos/usuarios)\n        const totalPendingTasks = tasks.filter(t => t.status !== 'completed').length;\n        const totalOverdueTasks = tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed').length;\n        if (totalPendingTasks > 0) {\n          aiResponse = `En general, tenemos ${totalPendingTasks} tareas pendientes en el sistema. De estas, ${totalOverdueTasks} están vencidas.`;\n\n          // Agregar información sobre la tarea más atrasada\n          if (totalOverdueTasks > 0) {\n            const overdueTasks = getAllOverdueTasks();\n            const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n            const oldestTask = sortedOverdueTasks[0];\n            const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n            aiResponse += ` La tarea más atrasada es \"${oldestTask.title}\" asignada a ${getUserNameById(oldestTask.assigneeId)}, con ${daysOverdue} días de atraso. ¡Es importante revisar las tareas vencidas para evitar problemas!`;\n\n            // Actualizar contexto\n            newContext.lastMentionedOldestTask = oldestTask;\n          }\n\n          // Actualizar contexto\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          newContext.lastMentionedOverdueTasks = tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n\n          // Ordenar tareas vencidas por fecha\n          if (totalOverdueTasks > 0) {\n            const sortedOverdueTasks = [...newContext.lastMentionedOverdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n            newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          }\n          newContext.lastDiscussedTopic = \"pendientes_general\";\n        } else {\n          aiResponse = \"¡Excelente! No hay tareas pendientes en este momento. ¡Todo está al día!\";\n          newContext.lastMentionedTasks = [];\n          newContext.lastMentionedOverdueTasks = [];\n          newContext.lastMentionedSortedOverdueTasks = [];\n          newContext.lastMentionedOldestTask = null;\n        }\n      }\n    }\n    // --- Fin de respuestas flexibles para \"pendientes\" ---\n\n    // Preguntas sobre tareas por cliente\n    else if (lowerQuery.includes(\"cliente\") && (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\"))) {\n      const clientNameMatch = lowerQuery.match(/cliente\\s+([\\w\\s]+)/);\n      if (clientNameMatch && clientNameMatch[1]) {\n        const requestedClientName = clientNameMatch[1].trim();\n        const client = clients.find(c => c.name.toLowerCase().includes(requestedClientName));\n        if (client) {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          if (clientTasks.length > 0) {\n            aiResponse = `El cliente \"${client.name}\" tiene un total de ${clientTasks.length} tareas, de las cuales ${pendingTasks.length} están pendientes`;\n            if (overdueTasks.length > 0) {\n              aiResponse += ` y ${overdueTasks.length} están vencidas.`;\n\n              // Información sobre la tarea vencida más antigua de este cliente\n              if (overdueTasks.length > 0) {\n                const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n                const oldestTask = sortedOverdueTasks[0];\n                const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n                const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n                aiResponse += ` La tarea vencida más antigua es \"${oldestTask.title}\", asignada a ${getUserNameById(oldestTask.assigneeId)}, que venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n\n                // Actualizar contexto\n                newContext.lastMentionedOldestTask = oldestTask;\n              }\n            } else {\n              aiResponse += `. ¡Buenas noticias! No hay tareas vencidas para este cliente.`;\n            }\n\n            // Actualizar contexto\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = pendingTasks;\n            newContext.lastMentionedOverdueTasks = overdueTasks;\n            if (overdueTasks.length > 0) {\n              newContext.lastMentionedSortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n            }\n            newContext.lastDiscussedTopic = \"tareas_cliente\";\n          } else {\n            aiResponse = `No se encontraron tareas para el cliente \"${client.name}\".`;\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = [];\n            newContext.lastMentionedOverdueTasks = [];\n            newContext.lastMentionedSortedOverdueTasks = [];\n            newContext.lastMentionedOldestTask = null;\n          }\n        } else {\n          aiResponse = `No encontré un cliente llamado \"${requestedClientName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de tareas por cliente\n        const clientSummaries = clients.map(client => {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          if (clientTasks.length > 0) {\n            return `\"${client.name}\": ${pendingTasks.length} pendientes, ${overdueTasks.length} vencidas.`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        if (clientSummaries) {\n          aiResponse = `Aquí tienes un resumen de tareas por cliente:\\n${clientSummaries}`;\n\n          // Actualizar contexto - todas las tareas pendientes\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n        } else {\n          aiResponse = \"No hay tareas asignadas a ningún cliente en este momento.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n\n    // Preguntas sobre tareas completadas (más directas)\n    else if (lowerQuery.includes(\"tareas completadas\") || lowerQuery.includes(\"cuántas completadas\")) {\n      const completedTasks = tasks.filter(t => t.status === 'completed');\n      const completedTasksCount = completedTasks.length;\n      if (completedTasksCount > 0) {\n        // Ordenar por fecha de completado (más reciente primero)\n        const sortedCompletedTasks = [...completedTasks].sort((a, b) => new Date(b.completedAt || b.dueDate) - new Date(a.completedAt || a.dueDate));\n        const latestTask = sortedCompletedTasks[0];\n        const latestTaskCompletedDate = formatDate(latestTask.completedAt || latestTask.dueDate);\n        aiResponse = `Se han completado ${completedTasksCount} tareas hasta ahora. La tarea completada más reciente es \"${latestTask.title}\" para el cliente ${getClientNameById(latestTask.clientId)}, completada el ${latestTaskCompletedDate}.`;\n\n        // Agregar información sobre quién ha completado más tareas\n        const completionsByUser = {};\n        completedTasks.forEach(task => {\n          const userId = task.assigneeId;\n          completionsByUser[userId] = (completionsByUser[userId] || 0) + 1;\n        });\n        let topPerformer = null;\n        let maxCompletions = 0;\n        for (const userId in completionsByUser) {\n          if (completionsByUser[userId] > maxCompletions) {\n            maxCompletions = completionsByUser[userId];\n            topPerformer = userId;\n          }\n        }\n        if (topPerformer) {\n          const topPerformerName = getUserNameById(parseInt(topPerformer));\n          aiResponse += ` ${topPerformerName} es quien más tareas ha completado, con un total de ${maxCompletions}.`;\n        }\n\n        // Actualizar contexto\n        newContext.lastMentionedTasks = completedTasks;\n        newContext.lastDiscussedTopic = \"tareas_completadas\";\n      } else {\n        aiResponse = \"Aún no hay tareas completadas. ¡Manos a la obra, que el tiempo vuela!\";\n        newContext.lastMentionedTasks = [];\n      }\n    }\n\n    // Preguntas sobre rendimiento de equipos\n    else if (lowerQuery.includes(\"rendimiento\") && lowerQuery.includes(\"equipo\")) {\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            const overdueRate = (report.overdueTasks / report.totalTasks * 100).toFixed(1);\n            aiResponse = `El equipo \"${team.name}\" tiene una tasa de completado del ${completionRate}% (${report.completedTasks} de ${report.totalTasks} tareas). `;\n            if (report.overdueTasks > 0) {\n              aiResponse += `Sin embargo, tienen un ${overdueRate}% de tareas vencidas (${report.overdueTasks} tareas). `;\n            } else {\n              aiResponse += `Y lo mejor es que no tienen tareas vencidas. `;\n            }\n\n            // Información sobre el rendimiento de los miembros del equipo\n            if (Object.keys(report.memberPerformance).length > 0) {\n              const memberPerformance = Object.values(report.memberPerformance);\n              const bestPerformer = memberPerformance.reduce((best, current) => {\n                return current.completedTasks > best.completedTasks ? current : best;\n              }, {\n                memberName: '',\n                completedTasks: 0\n              });\n              if (bestPerformer.completedTasks > 0) {\n                aiResponse += `${bestPerformer.memberName} es el miembro con mejor rendimiento, habiendo completado ${bestPerformer.completedTasks} tareas.`;\n              }\n            }\n\n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => teamMemberIds.includes(t.assigneeId));\n            newContext.lastDiscussedTopic = \"rendimiento_equipo\";\n          } else {\n            aiResponse = `No se encontraron datos de rendimiento para el equipo \"${team.name}\".`;\n            newContext.lastMentionedTeam = team;\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de rendimiento por equipo\n        const teamPerformanceSummaries = teams.map(team => {\n          const report = teamTasksReport[team.id];\n          if (report && report.totalTasks > 0) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            return `\"${team.name}\": ${completionRate}% de tareas completadas (${report.completedTasks}/${report.totalTasks}).`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        if (teamPerformanceSummaries) {\n          aiResponse = `Aquí tienes un resumen del rendimiento por equipo:\\n${teamPerformanceSummaries}`;\n\n          // Actualizar contexto - todas las tareas\n          newContext.lastMentionedTasks = tasks;\n          newContext.lastDiscussedTopic = \"rendimiento_equipos\";\n        } else {\n          aiResponse = \"No hay datos de rendimiento disponibles para los equipos.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n\n    // Saludos\n    else if (lowerQuery.includes(\"hola\") || lowerQuery.includes(\"qué tal\") || lowerQuery.includes(\"buenos días\") || lowerQuery.includes(\"buenas tardes\")) {\n      aiResponse = \"¡Hola! Soy tu asistente de informes. ¿En qué puedo ayudarte hoy con los datos de tus equipos y tareas? Pregúntame sobre pendientes, vencidas o el estado de algún equipo o integrante.\";\n    }\n    // Preguntas generales sobre la IA\n    else if (lowerQuery.includes(\"qué puedes hacer\") || lowerQuery.includes(\"cómo funcionas\") || lowerQuery.includes(\"ayuda\")) {\n      aiResponse = \"Puedo darte resúmenes sobre tareas pendientes (generales, por equipo o por integrante), tareas vencidas, y tareas completadas. También puedo decirte cuándo venció la tarea más antigua, el rendimiento de los equipos, y mucho más. Solo pregúntame algo como: '¿Cómo vamos con los pendientes?', 'Cuéntame sobre el equipo Impuestos', '¿Cuándo venció la tarea más antigua?' o '¿Qué tareas tiene Ana López?'\";\n    }\n\n    // Actualizar el contexto de la conversación\n    setConversationContext(newContext);\n    setTimeout(() => {\n      // Actualizar el historial con la respuesta\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        if (newHistory.length > 0) {\n          newHistory[newHistory.length - 1] = {\n            ...newHistory[newHistory.length - 1],\n            response: aiResponse\n          };\n        } else {\n          // Si por alguna razón no hay historial, agregar la consulta y respuesta\n          newHistory.push({\n            type: 'query',\n            text: userQuery,\n            response: aiResponse\n          });\n        }\n        return newHistory;\n      });\n      setResponse('');\n      setIsLoading(false);\n\n      // Scroll al final del chat\n      if (chatContainerRef.current) {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      }\n    }, 1500); // Simula un tiempo de procesamiento de la IA\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim()) {\n      // Guardar la consulta en el historial\n      setChatHistory([...chatHistory, {\n        type: 'query',\n        text: query\n      }]);\n      setResponse(''); // Limpiar respuesta anterior\n      generateAIResponse(query);\n      setQuery(''); // Limpiar input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow rounded-lg p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-medium text-gray-900 mb-4\",\n      children: \"Asistente de Informes con IA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 845,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500 mb-6\",\n      children: \"Preg\\xFAntame sobre el estado de las tareas de tus equipos o integrantes. Por ejemplo: \\\"\\xBFC\\xF3mo vamos con los pendientes?\\\", \\\"\\xBFCu\\xE1ntas tareas pendientes tiene el equipo Impuestos?\\\", \\\"\\xBFQu\\xE9 tareas tiene Ana L\\xF3pez?\\\", \\\"\\xBFCu\\xE1ndo venci\\xF3 la tarea m\\xE1s antigua?\\\".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatContainerRef,\n      className: \"border border-gray-200 rounded-md p-4 h-64 overflow-y-auto mb-4 bg-gray-50\",\n      children: [chatHistory.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray-800\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-semibold text-gray-600\",\n            children: \"T\\xFA: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 15\n          }, this), item.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 13\n        }, this), item.response && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray-800 whitespace-pre-line mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-semibold text-blue-600\",\n            children: \"Asistente: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 17\n          }, this), item.response]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"animate-spin h-5 w-5 text-blue-500 mr-3\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            className: \"opacity-25\",\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            stroke: \"currentColor\",\n            strokeWidth: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"opacity-75\",\n            fill: \"currentColor\",\n            d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600\",\n          children: \"Pensando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 11\n      }, this), !isLoading && chatHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500 italic\",\n        children: \"Esperando tu pregunta...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Escribe tu pregunta aqu\\xED...\",\n        className: \"flex-1 px-4 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"px-6 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\",\n        disabled: isLoading || !query.trim(),\n        children: \"Preguntar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs text-gray-500\",\n        children: \"Sugerencias de preguntas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 flex flex-wrap gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setQuery(\"¿Cómo vamos con los pendientes?\"),\n          className: \"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",\n          children: \"\\xBFC\\xF3mo vamos con los pendientes?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setQuery(\"¿Cuál es el pendiente más atrasado?\"),\n          className: \"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",\n          children: \"\\xBFCu\\xE1l es el m\\xE1s atrasado?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setQuery(\"¿Quién tiene el pendiente más atrasado?\"),\n          className: \"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\",\n          children: \"\\xBFQui\\xE9n tiene el m\\xE1s atrasado?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 844,\n    columnNumber: 5\n  }, this);\n};\n_s(AIReportAssistant, \"JZ/qpYWxAKxjJbYp1Nt+mc0zBkY=\");\n_c = AIReportAssistant;\nexport default AIReportAssistant;\nvar _c;\n$RefreshReg$(_c, \"AIReportAssistant\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","AIReportAssistant","tasks","users","teams","clients","currentUser","userTasksReport","teamTasksReport","clientTasksReport","_s","query","setQuery","response","setResponse","isLoading","setIsLoading","chatHistory","setChatHistory","conversationContext","setConversationContext","lastMentionedTasks","lastMentionedUser","lastMentionedTeam","lastMentionedClient","lastMentionedOverdueTasks","lastMentionedHighPriorityTasks","lastMentionedSortedOverdueTasks","lastMentionedOldestTask","lastDiscussedTopic","chatContainerRef","getUserNameById","id","_users$find","find","u","name","getTeamNameById","_teams$find","t","getClientNameById","_clients$find","c","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","getDaysOverdue","dueDate","today","due","diffTime","Math","abs","ceil","getAllOverdueTasks","filter","status","getOldestOverdueTask","overdueTasks","length","reduce","oldest","current","generateAIResponse","userQuery","aiResponse","newContext","lowerQuery","toLowerCase","trim","includes","forEach","task","index","title","assigneeId","match","numMatch","numTasks","parseInt","sortedOverdueTasks","sort","a","b","topTasks","slice","daysOverdue","priorityText","priority","clientId","oldestTask","oldestTaskDueDate","assigneeName","clientName","highPriorityTasks","nameMatch","requestedName","user","userTasks","pendingCount","inProgressCount","reviewCount","overdueCount","overdueDetails","map","join","upcomingTasks","upcomingDetails","overdueTasksCount","highPriorityCount","teamNameMatch","requestedTeamName","team","report","totalPending","pendingTasks","inProgressTasks","reviewTasks","teamMemberIds","teamId","teamOverdueTasks","userNameMatch","requestedUserName","userOverdueTasks","userSummaries","Boolean","totalPendingTasks","totalOverdueTasks","clientNameMatch","requestedClientName","client","clientTasks","clientSummaries","completedTasks","completedTasksCount","sortedCompletedTasks","completedAt","latestTask","latestTaskCompletedDate","completionsByUser","userId","topPerformer","maxCompletions","topPerformerName","completionRate","totalTasks","toFixed","overdueRate","Object","keys","memberPerformance","values","bestPerformer","best","memberName","teamPerformanceSummaries","setTimeout","prevHistory","newHistory","push","type","text","scrollTop","scrollHeight","handleSubmit","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","item","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","onSubmit","value","onChange","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Contabia/frontend/src/components/AIReportAssistant.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst AIReportAssistant = ({ tasks, users, teams, clients, currentUser, userTasksReport, teamTasksReport, clientTasksReport }) => {\n  const [query, setQuery] = useState('');\n  const [response, setResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [conversationContext, setConversationContext] = useState({\n    lastMentionedTasks: null, // Últimas tareas mencionadas en detalle\n    lastMentionedUser: null,\n    lastMentionedTeam: null,\n    lastMentionedClient: null,\n    lastMentionedOverdueTasks: null, // Todas las tareas vencidas mencionadas\n    lastMentionedHighPriorityTasks: null,\n    lastMentionedSortedOverdueTasks: null, // Tareas vencidas ordenadas por antigüedad\n    lastMentionedOldestTask: null,\n    lastDiscussedTopic: null // Tema general de la última interacción\n  });\n  const chatContainerRef = useRef(null);\n\n  // Helper para obtener el nombre de un usuario por ID\n  const getUserNameById = (id) => users.find(u => u.id === id)?.name || 'Desconocido';\n  // Helper para obtener el nombre de un equipo por ID\n  const getTeamNameById = (id) => teams.find(t => t.id === id)?.name || 'Desconocido';\n  // Helper para obtener el nombre de un cliente por ID\n  const getClientNameById = (id) => clients.find(c => c.id === id)?.name || 'Desconocido';\n  \n  // Helper para formatear fechas\n  const formatDate = (dateString) => {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString('es-ES', options);\n  };\n  \n  // Helper para calcular días de retraso\n  const getDaysOverdue = (dueDate) => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = Math.abs(today - due);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  // Obtener todas las tareas vencidas\n  const getAllOverdueTasks = () => {\n    return tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n  };\n\n  // Obtener la tarea vencida más antigua\n  const getOldestOverdueTask = () => {\n    const overdueTasks = getAllOverdueTasks();\n    if (overdueTasks.length === 0) return null;\n    \n    return overdueTasks.reduce((oldest, current) => {\n      return new Date(current.dueDate) < new Date(oldest.dueDate) ? current : oldest;\n    }, overdueTasks[0]);\n  };\n\n  // Simulación de la IA\n  const generateAIResponse = (userQuery) => {\n    setIsLoading(true);\n    let aiResponse = \"Lo siento, no pude encontrar información relevante para tu consulta. Intenta preguntar de otra manera.\";\n    let newContext = { ...conversationContext };\n\n    const lowerQuery = userQuery.toLowerCase().trim();\n\n    // --- Manejo de preguntas de seguimiento sobre tareas específicas ---\n    if (\n      (lowerQuery.includes(\"a quién\") || lowerQuery.includes(\"a quien\")) && \n      (lowerQuery.includes(\"están asignadas\") || lowerQuery.includes(\"está asignada\")) &&\n      (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\"))\n    ) {\n      if (newContext.lastMentionedTasks && newContext.lastMentionedTasks.length > 0) {\n        aiResponse = `Las tareas que mencionaste están asignadas a:\\n`;\n        newContext.lastMentionedTasks.forEach((task, index) => {\n          aiResponse += `${index + 1}. \"${task.title}\" está asignada a ${getUserNameById(task.assigneeId)}.\\n`;\n        });\n      } else {\n        aiResponse = \"Lo siento, no tengo un contexto claro de a qué tareas te refieres. ¿Podrías especificar?\";\n      }\n    }\n    // Preguntas sobre las N tareas con mayor atraso\n    else if (\n      (lowerQuery.includes(\"dime\") || lowerQuery.includes(\"muéstrame\")) &&\n      (lowerQuery.includes(\"las\") || lowerQuery.includes(\"los\")) &&\n      (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\")) &&\n      (lowerQuery.includes(\"mayor atraso\") || lowerQuery.includes(\"más atraso\") || lowerQuery.includes(\"más antiguas\")) &&\n      (lowerQuery.match(/\\d+/)) // Busca un número en la consulta\n    ) {\n      const numMatch = lowerQuery.match(/\\d+/);\n      const numTasks = parseInt(numMatch[0]);\n      \n      const overdueTasks = getAllOverdueTasks();\n      \n      if (overdueTasks.length > 0) {\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const topTasks = sortedOverdueTasks.slice(0, numTasks);\n        \n        if (topTasks.length > 0) {\n          aiResponse = `Aquí tienes las ${topTasks.length} tareas con mayor atraso:\\n`;\n          topTasks.forEach((task, index) => {\n            const daysOverdue = getDaysOverdue(task.dueDate);\n            const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                                task.priority === 'medium' ? '(prioridad media)' : \n                                '(baja prioridad)';\n            \n            aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n          });\n          \n          // Actualizar contexto para futuras preguntas de seguimiento\n          newContext.lastMentionedTasks = topTasks;\n          newContext.lastMentionedOverdueTasks = topTasks;\n          newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          newContext.lastDiscussedTopic = \"top_n_tareas_atrasadas\";\n        } else {\n          aiResponse = `No hay ${numTasks} tareas vencidas para mostrar. Solo hay ${overdueTasks.length} tareas vencidas en total.`;\n        }\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n      }\n    }\n    // Preguntas sobre quién tiene el pendiente más atrasado\n    else if (\n      (lowerQuery.includes(\"quién\") || lowerQuery.includes(\"quien\")) && \n      (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && \n      (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\"))\n    ) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n      \n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `${assigneeName} tiene la tarea más atrasada. Se trata de \"${oldestTask.title}\" para el cliente ${clientName}, que venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"persona_con_tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Preguntas sobre cuál es el pendiente más atrasado\n    else if (\n      (lowerQuery.includes(\"cuál\") || lowerQuery.includes(\"cual\")) && \n      (lowerQuery.includes(\"pendiente\") || lowerQuery.includes(\"tarea\")) && \n      (lowerQuery.includes(\"atrasado\") || lowerQuery.includes(\"atrasada\") || lowerQuery.includes(\"atraso\")) ||\n      (lowerQuery.includes(\"más\") && lowerQuery.includes(\"atrasado\"))\n    ) {\n      // Buscar la tarea más atrasada\n      let oldestTask;\n      \n      // Si tenemos la tarea más antigua guardada en el contexto\n      if (newContext.lastMentionedOldestTask) {\n        oldestTask = newContext.lastMentionedOldestTask;\n      }\n      // Si no hay contexto, buscamos la tarea más antigua en general\n      else {\n        oldestTask = getOldestOverdueTask();\n      }\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `La tarea más atrasada es \"${oldestTask.title}\" para el cliente ${clientName}, asignada a ${assigneeName}. Venció el ${oldestTaskDueDate} y lleva ${daysOverdue} días de atraso. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Es una tarea de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Es una tarea de prioridad media.`;\n        } else {\n          aiResponse += `Es una tarea de baja prioridad, pero aún así tiene un atraso considerable.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tarea_mas_atrasada\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Preguntas sobre tareas más antiguas respecto a su vencimiento\n    else if (\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"antiguas\") && lowerQuery.includes(\"vencimiento\")) ||\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"vencidas\") && lowerQuery.includes(\"antiguas\")) ||\n      (lowerQuery.includes(\"tareas\") && lowerQuery.includes(\"mayor\") && lowerQuery.includes(\"atraso\"))\n    ) {\n      const overdueTasks = getAllOverdueTasks();\n      \n      if (overdueTasks.length > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        \n        aiResponse = `Las tareas vencidas ordenadas por antigüedad son:\\n`;\n        \n        sortedOverdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                              task.priority === 'medium' ? '(prioridad media)' : \n                              '(baja prioridad)';\n          \n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n        \n        // Actualizar contexto\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n        newContext.lastDiscussedTopic = \"tareas_ordenadas_por_antiguedad\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n\n    // Manejo de preguntas de seguimiento basadas en contexto\n    else if (\n      (lowerQuery.includes(\"cuáles\") || lowerQuery.includes(\"cuales\") || lowerQuery.includes(\"qué\") || lowerQuery.includes(\"que\")) && \n      (lowerQuery.includes(\"son\") || lowerQuery.includes(\"es\")) && \n      (lowerQuery.includes(\"esas\") || lowerQuery.includes(\"estas\") || lowerQuery.includes(\"las\") || lowerQuery.includes(\"esas tareas\") || lowerQuery.includes(\"estas tareas\"))\n    ) {\n      // El usuario está preguntando por tareas mencionadas anteriormente\n      if (newContext.lastMentionedHighPriorityTasks && newContext.lastMentionedHighPriorityTasks.length > 0) {\n        const highPriorityTasks = newContext.lastMentionedHighPriorityTasks;\n        \n        aiResponse = `Las tareas de alta prioridad que mencioné son:\\n`;\n        highPriorityTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días.\\n`;\n        });\n        \n        newContext.lastDiscussedTopic = \"tareas_alta_prioridad\";\n      } \n      else if (newContext.lastMentionedOverdueTasks && newContext.lastMentionedOverdueTasks.length > 0) {\n        const overdueTasks = newContext.lastMentionedOverdueTasks;\n        \n        aiResponse = `Las tareas vencidas que mencioné son:\\n`;\n        overdueTasks.forEach((task, index) => {\n          const daysOverdue = getDaysOverdue(task.dueDate);\n          const priorityText = task.priority === 'high' ? '(alta prioridad)' : \n                              task.priority === 'medium' ? '(prioridad media)' : \n                              '(baja prioridad)';\n          \n          aiResponse += `${index + 1}. \"${task.title}\" para ${getClientNameById(task.clientId)}, asignada a ${getUserNameById(task.assigneeId)}. Venció hace ${daysOverdue} días ${priorityText}.\\n`;\n        });\n        \n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      }\n      else {\n        aiResponse = \"Lo siento, no he mencionado tareas específicas en nuestra conversación anterior. ¿Te gustaría que te muestre las tareas vencidas o pendientes?\";\n      }\n    }\n    // Preguntas sobre la tarea vencida más antigua\n    else if (\n      lowerQuery.includes(\"tarea vencida más antigua\") || \n      lowerQuery.includes(\"vencimiento más antiguo\") || \n      lowerQuery.includes(\"vencida hace más tiempo\") ||\n      (lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"vencida\") && lowerQuery.includes(\"más tiempo\")) ||\n      (lowerQuery.includes(\"cuál\") && lowerQuery.includes(\"está vencida\") && lowerQuery.includes(\"más tiempo\"))\n    ) {\n      const oldestTask = getOldestOverdueTask();\n      \n      if (oldestTask) {\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        const assigneeName = getUserNameById(oldestTask.assigneeId);\n        const clientName = getClientNameById(oldestTask.clientId);\n        \n        aiResponse = `La tarea vencida hace más tiempo es \"${oldestTask.title}\" para el cliente ${clientName}. Está asignada a ${assigneeName} y venció el ${oldestTaskDueDate}, hace ${daysOverdue} días. `;\n        \n        // Agregar información sobre la prioridad\n        if (oldestTask.priority === 'high') {\n          aiResponse += `Esta tarea es de alta prioridad y requiere atención inmediata.`;\n        } else if (oldestTask.priority === 'medium') {\n          aiResponse += `Esta tarea es de prioridad media.`;\n        } else {\n          aiResponse += `Esta tarea es de baja prioridad, pero aún así está vencida.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedTasks = [oldestTask];\n        newContext.lastMentionedOldestTask = oldestTask;\n        \n        // También guardar todas las tareas vencidas ordenadas\n        const overdueTasks = getAllOverdueTasks();\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastDiscussedTopic = \"tarea_mas_antigua\";\n      } else {\n        aiResponse = \"¡Buenas noticias! No hay tareas vencidas en este momento. Todo está al día.\";\n        newContext.lastMentionedTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // Pendientes por nombre específico (sin necesidad de la palabra \"integrante\" o \"colaborador\")\n    else if (lowerQuery.match(/pendientes\\s+de\\s+([\\w\\s]+)/) || lowerQuery.match(/tareas\\s+de\\s+([\\w\\s]+)/)) {\n      const nameMatch = lowerQuery.match(/(?:pendientes|tareas)\\s+de\\s+([\\w\\s]+)/);\n      if (nameMatch && nameMatch[1]) {\n        const requestedName = nameMatch[1].trim();\n        const user = users.find(u => u.name.toLowerCase().includes(requestedName.toLowerCase()));\n        \n        if (user) {\n          const userTasks = tasks.filter(t => t.assigneeId === user.id && t.status !== 'completed');\n          \n          if (userTasks.length > 0) {\n            const pendingCount = userTasks.filter(t => t.status === 'pending').length;\n            const inProgressCount = userTasks.filter(t => t.status === 'in_progress').length;\n            const reviewCount = userTasks.filter(t => t.status === 'review').length;\n            const overdueCount = userTasks.filter(t => new Date(t.dueDate) < new Date()).length;\n            \n            aiResponse = `${user.name} tiene ${userTasks.length} tareas pendientes en total. De estas, ${pendingCount} están en estado pendiente, ${inProgressCount} en progreso y ${reviewCount} en revisión.`;\n            \n            if (overdueCount > 0) {\n              aiResponse += ` ¡Atención! ${overdueCount} de estas tareas están vencidas.`;\n              \n              // Detallar las tareas vencidas\n              const overdueTasks = userTasks.filter(t => new Date(t.dueDate) < new Date());\n              const overdueDetails = overdueTasks.map(task => {\n                const daysOverdue = getDaysOverdue(task.dueDate);\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vencida hace ${daysOverdue} días)`;\n              }).join(', ');\n              \n              aiResponse += ` Las tareas vencidas son: ${overdueDetails}.`;\n            }\n            \n            // Listar las próximas tareas a vencer\n            const upcomingTasks = userTasks\n              .filter(t => new Date(t.dueDate) >= new Date())\n              .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\n              .slice(0, 3);\n              \n            if (upcomingTasks.length > 0) {\n              const upcomingDetails = upcomingTasks.map(task => {\n                return `\"${task.title}\" para ${getClientNameById(task.clientId)} (vence el ${formatDate(task.dueDate)})`;\n              }).join(', ');\n              \n              aiResponse += ` Las próximas tareas a vencer son: ${upcomingDetails}.`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = userTasks;\n            \n            // Si hay tareas vencidas, guardar la más antigua\n            if (overdueCount > 0) {\n              const sortedOverdueTasks = [...userTasks.filter(t => new Date(t.dueDate) < new Date())].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_usuario\";\n          } else {\n            aiResponse = `¡Buenas noticias! ${user.name} no tiene tareas pendientes en este momento.`;\n            newContext.lastMentionedUser = user;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré a ningún integrante llamado \"${requestedName}\". ¿Podrías verificar el nombre?`;\n        }\n      }\n    }\n    \n    // Preguntas sobre tareas vencidas (más directas)\n    else if (lowerQuery.includes(\"tareas vencidas\") || lowerQuery.includes(\"cuántas vencidas\")) {\n      const overdueTasks = getAllOverdueTasks();\n      const overdueTasksCount = overdueTasks.length;\n      \n      if (overdueTasksCount > 0) {\n        // Ordenar tareas vencidas por fecha de vencimiento (más antigua primero)\n        const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n        const oldestTask = sortedOverdueTasks[0];\n        const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n        const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n        \n        // Filtrar tareas de alta prioridad\n        const highPriorityTasks = sortedOverdueTasks.filter(t => t.priority === 'high');\n        const highPriorityCount = highPriorityTasks.length;\n        \n        aiResponse = `Actualmente hay ${overdueTasksCount} tareas vencidas en el sistema. La tarea vencida más antigua es \"${oldestTask.title}\" para el cliente ${getClientNameById(oldestTask.clientId)}, asignada a ${getUserNameById(oldestTask.assigneeId)}. Esta tarea venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n        \n        if (overdueTasksCount > 1 && highPriorityCount > 0) {\n          aiResponse += ` De las tareas vencidas, ${highPriorityCount} son de alta prioridad y requieren atención inmediata.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedHighPriorityTasks = highPriorityTasks;\n        newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n        newContext.lastMentionedOldestTask = oldestTask;\n        newContext.lastDiscussedTopic = \"tareas_vencidas\";\n      } else {\n        aiResponse = \"¡Excelente! No hay tareas vencidas en este momento. ¡Vamos por buen camino!\";\n        newContext.lastMentionedOverdueTasks = [];\n        newContext.lastMentionedHighPriorityTasks = [];\n        newContext.lastMentionedSortedOverdueTasks = [];\n        newContext.lastMentionedOldestTask = null;\n      }\n    }\n    \n    // --- Respuestas más flexibles para \"pendientes\" ---\n    else if (lowerQuery.includes(\"pendientes\") || lowerQuery.includes(\"situación actual\") || lowerQuery.includes(\"cómo vamos\")) {\n      // Pendientes por equipo específico\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n            aiResponse = `El equipo \"${team.name}\" tiene un total de ${totalPending} tareas pendientes. Específicamente, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n            if (report.overdueTasks > 0) {\n              aiResponse += ` ¡Ojo! También tienen ${report.overdueTasks} tareas vencidas.`;\n            } else {\n              aiResponse += ` ¡Y lo mejor es que no tienen tareas vencidas!`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => \n              teamMemberIds.includes(t.assigneeId) && \n              t.status !== 'completed'\n            );\n            \n            // Si hay tareas vencidas, guardar la más antigua\n            if (report.overdueTasks > 0) {\n              const teamOverdueTasks = tasks.filter(t => \n                teamMemberIds.includes(t.assigneeId) && \n                t.status !== 'completed' &&\n                new Date(t.dueDate) < new Date()\n              );\n              \n              const sortedOverdueTasks = [...teamOverdueTasks].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n              \n              newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n              newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n            }\n            newContext.lastDiscussedTopic = \"pendientes_equipo\";\n          } else {\n            aiResponse = `No se encontraron tareas para el equipo \"${team.name}\". Parece que están al día o no tienen asignaciones.`;\n            newContext.lastMentionedTeam = team;\n            newContext.lastMentionedTasks = [];\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre o intentar con otro?`;\n        }\n      } \n      // Pendientes por integrante específico\n      else if (lowerQuery.includes(\"integrante\") || lowerQuery.includes(\"colaborador\") || lowerQuery.includes(\"usuario\")) {\n        const userNameMatch = lowerQuery.match(/(?:integrante|colaborador|usuario)\\s+([\\w\\s]+)/);\n        if (userNameMatch && userNameMatch[1]) {\n          const requestedUserName = userNameMatch[1].trim();\n          const user = users.find(u => u.name.toLowerCase().includes(requestedUserName));\n          if (user) {\n            const report = userTasksReport[user.id];\n            if (report) {\n              const totalPending = report.pendingTasks + report.inProgressTasks + report.reviewTasks;\n              aiResponse = `\"${user.name}\" tiene un total de ${totalPending} tareas pendientes. De estas, ${report.pendingTasks} están en estado pendiente, ${report.inProgressTasks} en progreso y ${report.reviewTasks} en revisión.`;\n              if (report.overdueTasks > 0) {\n                aiResponse += ` ¡Cuidado! Tiene ${report.overdueTasks} tareas vencidas.`;\n              } else {\n                aiResponse += ` ¡Va muy bien, no tiene tareas vencidas!`;\n              }\n              \n              // Actualizar contexto\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = tasks.filter(t => \n                t.assigneeId === user.id && \n                t.status !== 'completed'\n              );\n              \n              // Si hay tareas vencidas, guardar la más antigua\n              if (report.overdueTasks > 0) {\n                const userOverdueTasks = tasks.filter(t => \n                  t.assigneeId === user.id && \n                  t.status !== 'completed' &&\n                  new Date(t.dueDate) < new Date()\n                );\n                \n                const sortedOverdueTasks = [...userOverdueTasks].sort(\n                  (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n                );\n                \n                newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n                newContext.lastMentionedOldestTask = sortedOverdueTasks[0];\n              }\n              newContext.lastDiscussedTopic = \"pendientes_usuario\";\n            } else {\n              aiResponse = `No se encontraron tareas para \"${user.name}\". Parece que está al día o no tiene asignaciones.`;\n              newContext.lastMentionedUser = user;\n              newContext.lastMentionedTasks = [];\n            }\n          } else {\n            aiResponse = `No encontré un integrante llamado \"${requestedUserName}\". ¿Podrías verificar el nombre?`;\n          }\n        } else {\n          // Resumen general de pendientes por integrante\n          const userSummaries = users.map(user => {\n            const report = userTasksReport[user.id];\n            if (report && (report.pendingTasks + report.inProgressTasks + report.reviewTasks > 0 || report.overdueTasks > 0)) {\n              return `\"${user.name}\" tiene ${report.pendingTasks + report.inProgressTasks + report.reviewTasks} pendientes (${report.overdueTasks} vencidas).`;\n            }\n            return null;\n          }).filter(Boolean).join('\\n');\n          \n          if (userSummaries) {\n            aiResponse = `Aquí tienes un resumen de los pendientes por integrante:\\n${userSummaries}`;\n            \n            // Actualizar contexto - todas las tareas pendientes\n            newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          } else {\n            aiResponse = \"¡Felicidades! Parece que todos los integrantes están al día con sus tareas pendientes.\";\n            newContext.lastMentionedTasks = [];\n          }\n        }\n      } else {\n        // Resumen general de pendientes (todos los equipos/usuarios)\n        const totalPendingTasks = tasks.filter(t => t.status !== 'completed').length;\n        const totalOverdueTasks = tasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed').length;\n        \n        if (totalPendingTasks > 0) {\n          aiResponse = `En general, tenemos ${totalPendingTasks} tareas pendientes en el sistema. De estas, ${totalOverdueTasks} están vencidas.`;\n          \n          // Agregar información sobre la tarea más atrasada\n          if (totalOverdueTasks > 0) {\n            const overdueTasks = getAllOverdueTasks();\n            const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n            const oldestTask = sortedOverdueTasks[0];\n            const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n            \n            aiResponse += ` La tarea más atrasada es \"${oldestTask.title}\" asignada a ${getUserNameById(oldestTask.assigneeId)}, con ${daysOverdue} días de atraso. ¡Es importante revisar las tareas vencidas para evitar problemas!`;\n            \n            // Actualizar contexto\n            newContext.lastMentionedOldestTask = oldestTask;\n          }\n          \n          // Actualizar contexto\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n          newContext.lastMentionedOverdueTasks = tasks.filter(t => \n            new Date(t.dueDate) < new Date() && \n            t.status !== 'completed'\n          );\n          \n          // Ordenar tareas vencidas por fecha\n          if (totalOverdueTasks > 0) {\n            const sortedOverdueTasks = [...newContext.lastMentionedOverdueTasks].sort(\n              (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n            );\n            newContext.lastMentionedSortedOverdueTasks = sortedOverdueTasks;\n          }\n          newContext.lastDiscussedTopic = \"pendientes_general\";\n        } else {\n          aiResponse = \"¡Excelente! No hay tareas pendientes en este momento. ¡Todo está al día!\";\n          newContext.lastMentionedTasks = [];\n          newContext.lastMentionedOverdueTasks = [];\n          newContext.lastMentionedSortedOverdueTasks = [];\n          newContext.lastMentionedOldestTask = null;\n        }\n      }\n    }\n    // --- Fin de respuestas flexibles para \"pendientes\" ---\n    \n    // Preguntas sobre tareas por cliente\n    else if (lowerQuery.includes(\"cliente\") && (lowerQuery.includes(\"tareas\") || lowerQuery.includes(\"pendientes\"))) {\n      const clientNameMatch = lowerQuery.match(/cliente\\s+([\\w\\s]+)/);\n      if (clientNameMatch && clientNameMatch[1]) {\n        const requestedClientName = clientNameMatch[1].trim();\n        const client = clients.find(c => c.name.toLowerCase().includes(requestedClientName));\n        \n        if (client) {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          \n          if (clientTasks.length > 0) {\n            aiResponse = `El cliente \"${client.name}\" tiene un total de ${clientTasks.length} tareas, de las cuales ${pendingTasks.length} están pendientes`;\n            \n            if (overdueTasks.length > 0) {\n              aiResponse += ` y ${overdueTasks.length} están vencidas.`;\n              \n              // Información sobre la tarea vencida más antigua de este cliente\n              if (overdueTasks.length > 0) {\n                const sortedOverdueTasks = [...overdueTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n                const oldestTask = sortedOverdueTasks[0];\n                const oldestTaskDueDate = formatDate(oldestTask.dueDate);\n                const daysOverdue = getDaysOverdue(oldestTask.dueDate);\n                \n                aiResponse += ` La tarea vencida más antigua es \"${oldestTask.title}\", asignada a ${getUserNameById(oldestTask.assigneeId)}, que venció el ${oldestTaskDueDate} (hace ${daysOverdue} días).`;\n                \n                // Actualizar contexto\n                newContext.lastMentionedOldestTask = oldestTask;\n              }\n            } else {\n              aiResponse += `. ¡Buenas noticias! No hay tareas vencidas para este cliente.`;\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = pendingTasks;\n            newContext.lastMentionedOverdueTasks = overdueTasks;\n            if (overdueTasks.length > 0) {\n              newContext.lastMentionedSortedOverdueTasks = [...overdueTasks].sort(\n                (a, b) => new Date(a.dueDate) - new Date(b.dueDate)\n              );\n            }\n            newContext.lastDiscussedTopic = \"tareas_cliente\";\n          } else {\n            aiResponse = `No se encontraron tareas para el cliente \"${client.name}\".`;\n            newContext.lastMentionedClient = client;\n            newContext.lastMentionedTasks = [];\n            newContext.lastMentionedOverdueTasks = [];\n            newContext.lastMentionedSortedOverdueTasks = [];\n            newContext.lastMentionedOldestTask = null;\n          }\n        } else {\n          aiResponse = `No encontré un cliente llamado \"${requestedClientName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de tareas por cliente\n        const clientSummaries = clients.map(client => {\n          const clientTasks = tasks.filter(t => t.clientId === client.id);\n          const pendingTasks = clientTasks.filter(t => t.status !== 'completed');\n          const overdueTasks = clientTasks.filter(t => new Date(t.dueDate) < new Date() && t.status !== 'completed');\n          \n          if (clientTasks.length > 0) {\n            return `\"${client.name}\": ${pendingTasks.length} pendientes, ${overdueTasks.length} vencidas.`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        \n        if (clientSummaries) {\n          aiResponse = `Aquí tienes un resumen de tareas por cliente:\\n${clientSummaries}`;\n          \n          // Actualizar contexto - todas las tareas pendientes\n          newContext.lastMentionedTasks = tasks.filter(t => t.status !== 'completed');\n        } else {\n          aiResponse = \"No hay tareas asignadas a ningún cliente en este momento.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n    \n    // Preguntas sobre tareas completadas (más directas)\n    else if (lowerQuery.includes(\"tareas completadas\") || lowerQuery.includes(\"cuántas completadas\")) {\n      const completedTasks = tasks.filter(t => t.status === 'completed');\n      const completedTasksCount = completedTasks.length;\n      \n      if (completedTasksCount > 0) {\n        // Ordenar por fecha de completado (más reciente primero)\n        const sortedCompletedTasks = [...completedTasks].sort((a, b) => new Date(b.completedAt || b.dueDate) - new Date(a.completedAt || a.dueDate));\n        const latestTask = sortedCompletedTasks[0];\n        const latestTaskCompletedDate = formatDate(latestTask.completedAt || latestTask.dueDate);\n        \n        aiResponse = `Se han completado ${completedTasksCount} tareas hasta ahora. La tarea completada más reciente es \"${latestTask.title}\" para el cliente ${getClientNameById(latestTask.clientId)}, completada el ${latestTaskCompletedDate}.`;\n        \n        // Agregar información sobre quién ha completado más tareas\n        const completionsByUser = {};\n        completedTasks.forEach(task => {\n          const userId = task.assigneeId;\n          completionsByUser[userId] = (completionsByUser[userId] || 0) + 1;\n        });\n        \n        let topPerformer = null;\n        let maxCompletions = 0;\n        \n        for (const userId in completionsByUser) {\n          if (completionsByUser[userId] > maxCompletions) {\n            maxCompletions = completionsByUser[userId];\n            topPerformer = userId;\n          }\n        }\n        \n        if (topPerformer) {\n          const topPerformerName = getUserNameById(parseInt(topPerformer));\n          aiResponse += ` ${topPerformerName} es quien más tareas ha completado, con un total de ${maxCompletions}.`;\n        }\n        \n        // Actualizar contexto\n        newContext.lastMentionedTasks = completedTasks;\n        newContext.lastDiscussedTopic = \"tareas_completadas\";\n      } else {\n        aiResponse = \"Aún no hay tareas completadas. ¡Manos a la obra, que el tiempo vuela!\";\n        newContext.lastMentionedTasks = [];\n      }\n    }\n    \n    // Preguntas sobre rendimiento de equipos\n    else if (lowerQuery.includes(\"rendimiento\") && lowerQuery.includes(\"equipo\")) {\n      const teamNameMatch = lowerQuery.match(/equipo\\s+([\\w\\s]+)/);\n      if (teamNameMatch && teamNameMatch[1]) {\n        const requestedTeamName = teamNameMatch[1].trim();\n        const team = teams.find(t => t.name.toLowerCase().includes(requestedTeamName));\n        \n        if (team) {\n          const report = teamTasksReport[team.id];\n          if (report) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            const overdueRate = (report.overdueTasks / report.totalTasks * 100).toFixed(1);\n            \n            aiResponse = `El equipo \"${team.name}\" tiene una tasa de completado del ${completionRate}% (${report.completedTasks} de ${report.totalTasks} tareas). `;\n            \n            if (report.overdueTasks > 0) {\n              aiResponse += `Sin embargo, tienen un ${overdueRate}% de tareas vencidas (${report.overdueTasks} tareas). `;\n            } else {\n              aiResponse += `Y lo mejor es que no tienen tareas vencidas. `;\n            }\n            \n            // Información sobre el rendimiento de los miembros del equipo\n            if (Object.keys(report.memberPerformance).length > 0) {\n              const memberPerformance = Object.values(report.memberPerformance);\n              const bestPerformer = memberPerformance.reduce((best, current) => {\n                return (current.completedTasks > best.completedTasks) ? current : best;\n              }, { memberName: '', completedTasks: 0 });\n              \n              if (bestPerformer.completedTasks > 0) {\n                aiResponse += `${bestPerformer.memberName} es el miembro con mejor rendimiento, habiendo completado ${bestPerformer.completedTasks} tareas.`;\n              }\n            }\n            \n            // Actualizar contexto\n            newContext.lastMentionedTeam = team;\n            const teamMemberIds = users.filter(u => u.teamId === team.id).map(u => u.id);\n            newContext.lastMentionedTasks = tasks.filter(t => teamMemberIds.includes(t.assigneeId));\n            newContext.lastDiscussedTopic = \"rendimiento_equipo\";\n          } else {\n            aiResponse = `No se encontraron datos de rendimiento para el equipo \"${team.name}\".`;\n            newContext.lastMentionedTeam = team;\n          }\n        } else {\n          aiResponse = `No encontré un equipo llamado \"${requestedTeamName}\". ¿Podrías verificar el nombre?`;\n        }\n      } else {\n        // Resumen general de rendimiento por equipo\n        const teamPerformanceSummaries = teams.map(team => {\n          const report = teamTasksReport[team.id];\n          if (report && report.totalTasks > 0) {\n            const completionRate = (report.completedTasks / report.totalTasks * 100).toFixed(1);\n            return `\"${team.name}\": ${completionRate}% de tareas completadas (${report.completedTasks}/${report.totalTasks}).`;\n          }\n          return null;\n        }).filter(Boolean).join('\\n');\n        \n        if (teamPerformanceSummaries) {\n          aiResponse = `Aquí tienes un resumen del rendimiento por equipo:\\n${teamPerformanceSummaries}`;\n          \n          // Actualizar contexto - todas las tareas\n          newContext.lastMentionedTasks = tasks;\n          newContext.lastDiscussedTopic = \"rendimiento_equipos\";\n        } else {\n          aiResponse = \"No hay datos de rendimiento disponibles para los equipos.\";\n          newContext.lastMentionedTasks = [];\n        }\n      }\n    }\n    \n    // Saludos\n    else if (lowerQuery.includes(\"hola\") || lowerQuery.includes(\"qué tal\") || lowerQuery.includes(\"buenos días\") || lowerQuery.includes(\"buenas tardes\")) {\n      aiResponse = \"¡Hola! Soy tu asistente de informes. ¿En qué puedo ayudarte hoy con los datos de tus equipos y tareas? Pregúntame sobre pendientes, vencidas o el estado de algún equipo o integrante.\";\n    }\n    // Preguntas generales sobre la IA\n    else if (lowerQuery.includes(\"qué puedes hacer\") || lowerQuery.includes(\"cómo funcionas\") || lowerQuery.includes(\"ayuda\")) {\n      aiResponse = \"Puedo darte resúmenes sobre tareas pendientes (generales, por equipo o por integrante), tareas vencidas, y tareas completadas. También puedo decirte cuándo venció la tarea más antigua, el rendimiento de los equipos, y mucho más. Solo pregúntame algo como: '¿Cómo vamos con los pendientes?', 'Cuéntame sobre el equipo Impuestos', '¿Cuándo venció la tarea más antigua?' o '¿Qué tareas tiene Ana López?'\";\n    }\n\n    // Actualizar el contexto de la conversación\n    setConversationContext(newContext);\n\n    setTimeout(() => {\n      // Actualizar el historial con la respuesta\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        if (newHistory.length > 0) {\n          newHistory[newHistory.length - 1] = {\n            ...newHistory[newHistory.length - 1],\n            response: aiResponse\n          };\n        } else {\n          // Si por alguna razón no hay historial, agregar la consulta y respuesta\n          newHistory.push({ type: 'query', text: userQuery, response: aiResponse });\n        }\n        return newHistory;\n      });\n      \n      setResponse('');\n      setIsLoading(false);\n      \n      // Scroll al final del chat\n      if (chatContainerRef.current) {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      }\n    }, 1500); // Simula un tiempo de procesamiento de la IA\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (query.trim()) {\n      // Guardar la consulta en el historial\n      setChatHistory([...chatHistory, { type: 'query', text: query }]);\n      setResponse(''); // Limpiar respuesta anterior\n      generateAIResponse(query);\n      setQuery(''); // Limpiar input\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow rounded-lg p-6\">\n      <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Asistente de Informes con IA</h3>\n      <p className=\"text-sm text-gray-500 mb-6\">\n        Pregúntame sobre el estado de las tareas de tus equipos o integrantes. Por ejemplo:\n        \"¿Cómo vamos con los pendientes?\", \"¿Cuántas tareas pendientes tiene el equipo Impuestos?\", \n        \"¿Qué tareas tiene Ana López?\", \"¿Cuándo venció la tarea más antigua?\".\n      </p>\n\n      <div ref={chatContainerRef} className=\"border border-gray-200 rounded-md p-4 h-64 overflow-y-auto mb-4 bg-gray-50\">\n        {chatHistory.map((item, index) => (\n          <div key={index} className=\"mb-3\">\n            <div className=\"text-gray-800\">\n              <span className=\"font-semibold text-gray-600\">Tú: </span>{item.text}\n            </div>\n            {item.response && (\n              <div className=\"text-gray-800 whitespace-pre-line mt-2\">\n                <span className=\"font-semibold text-blue-600\">Asistente: </span>{item.response}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"flex items-center mt-2\">\n            <svg className=\"animate-spin h-5 w-5 text-blue-500 mr-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            <span className=\"text-gray-600\">Pensando...</span>\n          </div>\n        )}\n        \n        {!isLoading && chatHistory.length === 0 && (\n          <div className=\"text-gray-500 italic\">Esperando tu pregunta...</div>\n        )}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"flex\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Escribe tu pregunta aquí...\"\n          className=\"flex-1 px-4 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          disabled={isLoading}\n        />\n        <button\n          type=\"submit\"\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n          disabled={isLoading || !query.trim()}\n        >\n          Preguntar\n        </button>\n      </form>\n      \n      <div className=\"mt-4\">\n        <p className=\"text-xs text-gray-500\">Sugerencias de preguntas:</p>\n        <div className=\"mt-2 flex flex-wrap gap-2\">\n          <button \n            onClick={() => setQuery(\"¿Cómo vamos con los pendientes?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Cómo vamos con los pendientes?\n          </button>\n          <button \n            onClick={() => setQuery(\"¿Cuál es el pendiente más atrasado?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Cuál es el más atrasado?\n          </button>\n          <button \n            onClick={() => setQuery(\"¿Quién tiene el pendiente más atrasado?\")}\n            className=\"text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 py-1 px-2 rounded-full\"\n          >\n            ¿Quién tiene el más atrasado?\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIReportAssistant;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}